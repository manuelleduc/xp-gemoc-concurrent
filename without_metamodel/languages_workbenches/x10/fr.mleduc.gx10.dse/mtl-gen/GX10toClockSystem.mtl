[comment encoding = UTF-8 /]

[module generate('http://fr.inria.aoste.timemodel.ccslmodel.clockexpressionandrelation', 
	'http://www.eclipse.org/emf/2002/Ecore', 
	'http://org.gemoc.moccml/1.0', 
	'http://fr.inria.aoste.timemodel',
	'http://org.gemoc.moccml.fsmmodel/1.0',
	'http://mleduc.fr/gx10') ]

[template public generate(aProgram : Program)]
[comment @main/]
[file (aProgram.name+'_withMoC-.clocksystem', false, 'UTF-8')]

"Some global constants"
|system moccmllibs ccsllibs|
"MoCCML librairies specifications" 

	"CCSL librairies specifications"


"Instanciation" 


system := ClockSystem named: '[aProgram.name/]_withMoC-'.
system addLibrary:moccmllibs asDictionary.
"system addLibs:ccsllibs asDictionary."

[for (element : gx10::Program| aProgram.eAllContents(gx10::Program))]
"clocks for Program [element.name/]" 
system addClocks: #(start[element.name/]).

"internal clocks for gx10::Program [element.name/]" 
	system addInternalClocks: #(oneStartOnly[element.name/]).

[/for]
[for (element : gx10::Method| aProgram.eAllContents(gx10::Method))]
"clocks for Method [element.name/]" 
system addClocks: #(startMethodEvt[element.name/]).
system addClocks: #(endMethodEvt[element.name/]).

"internal clocks for gx10::Method [element.name/]" 
	
[/for]
[for (element : gx10::Statement| aProgram.eAllContents(gx10::Statement))]
"clocks for Statement [element.name/]" 
system addClocks: #(startStatement[element.name/]).
system addClocks: #(endStatement[element.name/]).

[/for]
[for (element : gx10::Print| aProgram.eAllContents(gx10::Print))]
"clocks for Print [element.name/]" 
system addClocks: #(print[element.name/]).

[/for]
[for (element : gx10::IntVar| aProgram.eAllContents(gx10::IntVar))]
"clocks for IntVar [element.name/]" 
system addClocks: #(evaluate[element.name/]).

[/for]
[for (element : gx10::MethodCall| aProgram.eAllContents(gx10::MethodCall))]
"clocks for MethodCall [element.name/]" 
system addClocks: #(callPreparation[element.name/]).

[/for]
[for (element : gx10::ControlStructure| aProgram.eAllContents(gx10::ControlStructure))]
"clocks for ControlStructure [element.name/]" 
system addClocks: #(doEvaluateIf[element.name/]).
system addClocks: #(evaluateTrue[element.name/]).
system addClocks: #(evaluateFalse[element.name/]).

[/for]
[for (element : gx10::If| aProgram.eAllContents(gx10::If))]
"clocks for If [element.name/]" 
"internal clocks for gx10::If [element.name/]" 
	system addInternalClocks: #(ifOnBrancheEnded[element.name/]).

[/for]
[for (element : gx10::While| aProgram.eAllContents(gx10::While))]
"clocks for While [element.name/]" 
"internal clocks for gx10::While [element.name/]" 
	system addInternalClocks: #(allWhileLoopEnds[element.name/]).

[/for]
[for (element : gx10::Block| aProgram.eAllContents(gx10::Block))]
"clocks for Block [element.name/]" 
[/for]

[for (element : gx10::Program| aProgram.eAllContents(gx10::Program))]
"expressions used by  Program [element.name/]" 

	[if ( ->size()>1) ]
	system allOneTickAndNoMore: #(start[element.name/]) named: #oneStartOnly[element.name/]. 
	[/if]
 
"relations for Program [element.name/]" 
	"initBeforeAll in Program [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(start[element.name/]  startMethodEvt[element.startMethod.name/])  constants:{-1} .
		[/if]
	"initOnlyOnce in Program [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Coincides clocks: #(start[element.name/]  oneStartOnly[element.name/]) .
		[/if]
[/for]
[for (element : gx10::Method| aProgram.eAllContents(gx10::Method))]
"expressions used by  Method [element.name/]" 

	[if ( ) ]
	system allUnion: #() named: #allEventWhichCall0[element.name/]. 
	[/if]
 

	[if ( ) ]
	system all: #() named: #inps0[element.name/]. 
	[/if]
 

	[if ( true) ]
	system allUnion: #() named: #allEventsUnion[element.name/]. 
	[/if]
 

	[if ( ) ]
	system allUnion: #() named: #allEventWhichCall2[element.name/]. 
	[/if]
 

	[if ( ) ]
	system allUnion: #() named: #allEventWhichCall22[element.name/]. 
	[/if]
 
"relations for Method [element.name/]" 
	"methodStartThenEnd in Method [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(startMethodEvt[element.name/]  endMethodEvt[element.name/])  constants:{-1} .
		[/if]
	"methodBlockStartAtStart in Method [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(startMethodEvt[element.name/]  startStatement[element.methodBlock.name/])  constants:{-1} .
		[/if]
	"methodStopWhenBlockStop in Method [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(endStatement[element.methodBlock.name/]  endMethodEvt[element.name/])  constants:{-1} .
		[/if]
	"methodStartOnCall0 in Method [element.name/]"
		[if ( ( self.inProgram.startMethod = self and self.calledBy->size() > 0) ) ]
	system library: #Kernel relation: #Precedes clocks: #(allEventsUnion[element.name/]  startMethodEvt[element.name/])  constants:{-1} .
		[/if]
	"methodStartOnCall1 in Method [element.name/]"
		[if ( ( self.inProgram.startMethod = self and self.calledBy->size() = 0) ) ]
	system library: #Kernel relation: #Coincides clocks: #(startMethodEvt[element.inProgram.startMethod.name/]  startMethodEvt[element.name/]) .
		[/if]
	"methodStartOnCall2 in Method [element.name/]"
		[if ( ( self.inProgram.startMethod <> self and self.calledBy->size() > 0) ) ]
	system library: #Kernel relation: #Precedes clocks: #(allEventWhichCall2[element.name/]  startMethodEvt[element.name/])  constants:{-1} .
		[/if]
	"methodEndOnCall2 in Method [element.name/]"
		[if ( ( self.inProgram.startMethod <> self and self.calledBy->size() > 0) ) ]
	system library: #Kernel relation: #Precedes clocks: #(endMethodEvt[element.name/]  allEventWhichCall22[element.name/])  constants:{-1} .
		[/if]
[/for]
[for (element : gx10::Statement| aProgram.eAllContents(gx10::Statement))]
"relations for Statement [element.name/]" 
	"statementStartThenStop in Statement [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(startStatement[element.name/]  endStatement[element.name/])  constants:{-1} .
		[/if]
	"waitForPreviousToFinish in Statement [element.name/]"
		[if ( ( self.inBlock <> null and self.inBlock.blockStatements->indexOf(self) > 1) ) ]
	system library: #Kernel relation: #Precedes clocks: #(endStatement[element.inBlock.blockStatements->at(element.inBlock.blockStatements->indexOf(self).-(1)).name/]  startStatement[element.name/])  constants:{-1} .
		[/if]
	"firstStartAfterBlockStart in Statement [element.name/]"
		[if ( ( self.inBlock <> null and self.inBlock.blockStatements->first() = self) ) ]
	system library: #Kernel relation: #Precedes clocks: #(startStatement[element.inBlock.name/]  startStatement[element.name/])  constants:{-1} .
		[/if]
	"lastEndWhenBlockEnd in Statement [element.name/]"
		[if ( ( self.inBlock <> null and self.inBlock.blockStatements->indexOf(self) = self.inBlock.blockStatements->size()) ) ]
	system library: #Kernel relation: #Precedes clocks: #(endStatement[element.name/]  endStatement[element.inBlock.name/])  constants:{-1} .
		[/if]
[/for]
[for (element : gx10::Print| aProgram.eAllContents(gx10::Print))]
"relations for Print [element.name/]" 
	"printEvaluateBeforePrint0 in Print [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(startStatement[element.name/]  startStatement[element.toPrint.name/])  constants:{-1} .
		[/if]
	"printEvaluateBeforePrint1 in Print [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(endStatement[element.toPrint.name/]  print[element.name/])  constants:{-1} .
		[/if]
	"printFinishAfterPrint in Print [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(print[element.name/]  endStatement[element.name/])  constants:{-1} .
		[/if]
[/for]
[for (element : gx10::IntVar| aProgram.eAllContents(gx10::IntVar))]
"relations for IntVar [element.name/]" 
	"intVarEvaluateBefore0 in IntVar [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(startStatement[element.name/]  startStatement[element.intVarExpr.name/])  constants:{-1} .
		[/if]
	"intVarEvaluateBefore1 in IntVar [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(endStatement[element.intVarExpr.name/]  evaluate[element.name/])  constants:{-1} .
		[/if]
	"intVarEvaluateBeforet in IntVar [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(evaluate[element.name/]  endStatement[element.name/])  constants:{-1} .
		[/if]
[/for]
[for (element : gx10::MethodCall| aProgram.eAllContents(gx10::MethodCall))]
"relations for MethodCall [element.name/]" 
	"methodStartBeforePrepareCall in MethodCall [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(startStatement[element.name/]  callPreparation[element.name/])  constants:{-1} .
		[/if]
[/for]
[for (element : gx10::ControlStructure| aProgram.eAllContents(gx10::ControlStructure))]
"relations for ControlStructure [element.name/]" 
	"ifTrueThenElseElse in ControlStructure [element.name/]"
	[if ( true) ]
	system
		library: #GX10
		relation: #BooleanGuardedTransitionRuleDef
		clocks: #(doEvaluateIf[element.name/]  evaluateTrue[element.name/]  evaluateFalse[element.name/])
		constants: {}
		variables: {}.
	[/if]

[/for]
[for (element : gx10::If| aProgram.eAllContents(gx10::If))]
"expressions used by  If [element.name/]" 

	[if ( true) ]
	system allInf: #(endStatement[element.thenBlock.name/] endStatement[element.elseBlock.name/]) named: #ifOnBrancheEnded[element.name/]. 
	[/if]
 
"relations for If [element.name/]" 
	"ifConditionEvaluatedAfterStart in If [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(startStatement[element.name/]  startStatement[element.controlStructureCondition.name/])  constants:{-1} .
		[/if]
	"ifMakeBranchingAfterEvalutation in If [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(endStatement[element.controlStructureCondition.name/]  doEvaluateIf[element.name/])  constants:{-1} .
		[/if]
	"ifThenBranchStartIfEvaluateTrue in If [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(evaluateTrue[element.name/]  startStatement[element.thenBlock.name/])  constants:{-1} .
		[/if]
	"ifElseBranchStartIfEvaluateFalse in If [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(evaluateFalse[element.name/]  startStatement[element.elseBlock.name/])  constants:{-1} .
		[/if]
	"idEndWhenOneBranchEnd in If [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(ifOnBrancheEnded[element.name/]  endStatement[element.name/])  constants:{-1} .
		[/if]
[/for]
[for (element : gx10::While| aProgram.eAllContents(gx10::While))]
"expressions used by  While [element.name/]" 

	[if ( true) ]
	system allUnion: #(startStatement[element.name/] endStatement[element.whileBlock.name/]) named: #allWhileLoopEnds[element.name/]. 
	[/if]
 
"relations for While [element.name/]" 
	"whileEvaluateBeforeBranching in While [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(allWhileLoopEnds[element.name/]  startStatement[element.controlStructureCondition.name/])  constants:{-1} .
		[/if]
	"whileWaitEndEvalBeforeBranching in While [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(endStatement[element.controlStructureCondition.name/]  doEvaluateIf[element.name/])  constants:{-1} .
		[/if]
	"whileStartLoopOnEvalTrue in While [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(evaluateTrue[element.name/]  startStatement[element.whileBlock.name/])  constants:{-1} .
		[/if]
	"whileEndOnEvalFalse in While [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(evaluateFalse[element.name/]  endStatement[element.name/])  constants:{-1} .
		[/if]
[/for]
[for (element : gx10::Block| aProgram.eAllContents(gx10::Block))]
"relations for Block [element.name/]" 
	"firstInstructionStartWhenBlockReady in Block [element.name/]"
		[if ( ( self.blockStatements->size() > 0) ) ]
	system library: #Kernel relation: #Precedes clocks: #(startStatement[element.name/]  startStatement[element.blockStatements->first().name/])  constants:{-1} .
		[/if]
	"blockStatementWaitForAllToFinish in Block [element.name/]"
		[if ( ( self.blockStatements->size() > 0) ) ]
	system library: #Kernel relation: #Precedes clocks: #(endStatement[element.blockStatements->last().name/]  endStatement[element.name/])  constants:{-1} .
		[/if]
[/for]
[/file]
[file ('ClkSysFunctionTest.clocksystem', false, 'UTF-8')]
SimpleSDF example1 system
[/file]


[/template]



