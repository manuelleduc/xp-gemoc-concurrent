/*
 * generated by Xtext 2.9.2
 */
package fr.mleduc.serializer;

import com.google.inject.Inject;
import fr.mleduc.services.GX10GrammarAccess;
import gx10.And;
import gx10.Async;
import gx10.Block;
import gx10.BoolVar;
import gx10.BoolVarAccess;
import gx10.Equal;
import gx10.False;
import gx10.Finish;
import gx10.Gx10Package;
import gx10.If;
import gx10.IntConst;
import gx10.IntVar;
import gx10.IntVarAccess;
import gx10.Method;
import gx10.MethodCall;
import gx10.MethodCallParameter;
import gx10.Not;
import gx10.Plus;
import gx10.Print;
import gx10.Program;
import gx10.Referentiable;
import gx10.Time;
import gx10.True;
import gx10.While;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class GX10SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GX10GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Gx10Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Gx10Package.AND:
				sequence_And(context, (And) semanticObject); 
				return; 
			case Gx10Package.ASYNC:
				sequence_Async(context, (Async) semanticObject); 
				return; 
			case Gx10Package.BLOCK:
				sequence_Block(context, (Block) semanticObject); 
				return; 
			case Gx10Package.BOOL_VAR:
				sequence_BoolVar(context, (BoolVar) semanticObject); 
				return; 
			case Gx10Package.BOOL_VAR_ACCESS:
				sequence_BoolVarAccess(context, (BoolVarAccess) semanticObject); 
				return; 
			case Gx10Package.EQUAL:
				sequence_Equal(context, (Equal) semanticObject); 
				return; 
			case Gx10Package.FALSE:
				sequence_False(context, (False) semanticObject); 
				return; 
			case Gx10Package.FINISH:
				sequence_Finish(context, (Finish) semanticObject); 
				return; 
			case Gx10Package.IF:
				sequence_If(context, (If) semanticObject); 
				return; 
			case Gx10Package.INT_CONST:
				sequence_IntConst(context, (IntConst) semanticObject); 
				return; 
			case Gx10Package.INT_VAR:
				sequence_IntVar(context, (IntVar) semanticObject); 
				return; 
			case Gx10Package.INT_VAR_ACCESS:
				sequence_IntVarAccess(context, (IntVarAccess) semanticObject); 
				return; 
			case Gx10Package.METHOD:
				sequence_Method(context, (Method) semanticObject); 
				return; 
			case Gx10Package.METHOD_CALL:
				sequence_MethodCall(context, (MethodCall) semanticObject); 
				return; 
			case Gx10Package.METHOD_CALL_PARAMETER:
				sequence_MethodCallParameter(context, (MethodCallParameter) semanticObject); 
				return; 
			case Gx10Package.NOT:
				sequence_Not(context, (Not) semanticObject); 
				return; 
			case Gx10Package.PLUS:
				sequence_Plus(context, (Plus) semanticObject); 
				return; 
			case Gx10Package.PRINT:
				sequence_Print(context, (Print) semanticObject); 
				return; 
			case Gx10Package.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case Gx10Package.REFERENTIABLE:
				sequence_Referentiable(context, (Referentiable) semanticObject); 
				return; 
			case Gx10Package.TIME:
				sequence_Time(context, (Time) semanticObject); 
				return; 
			case Gx10Package.TRUE:
				sequence_True(context, (True) semanticObject); 
				return; 
			case Gx10Package.WHILE:
				sequence_While(context, (While) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Statement returns And
	 *     BoolExpression returns And
	 *     Expression returns And
	 *     And returns And
	 *
	 * Constraint:
	 *     (leftAndExpression=BoolExpression rightAndExpression=BoolExpression)
	 */
	protected void sequence_And(ISerializationContext context, And semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Gx10Package.Literals.AND__LEFT_AND_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Gx10Package.Literals.AND__LEFT_AND_EXPRESSION));
			if (transientValues.isValueTransient(semanticObject, Gx10Package.Literals.AND__RIGHT_AND_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Gx10Package.Literals.AND__RIGHT_AND_EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAndAccess().getLeftAndExpressionBoolExpressionParserRuleCall_3_0(), semanticObject.getLeftAndExpression());
		feeder.accept(grammarAccess.getAndAccess().getRightAndExpressionBoolExpressionParserRuleCall_5_0(), semanticObject.getRightAndExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Async
	 *     Async returns Async
	 *
	 * Constraint:
	 *     asyncBlock=Statement
	 */
	protected void sequence_Async(ISerializationContext context, Async semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Gx10Package.Literals.ASYNC__ASYNC_BLOCK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Gx10Package.Literals.ASYNC__ASYNC_BLOCK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAsyncAccess().getAsyncBlockStatementParserRuleCall_3_0(), semanticObject.getAsyncBlock());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Block
	 *     Block returns Block
	 *
	 * Constraint:
	 *     blockStatements+=Statement*
	 */
	protected void sequence_Block(ISerializationContext context, Block semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns BoolVarAccess
	 *     BoolExpression returns BoolVarAccess
	 *     Expression returns BoolVarAccess
	 *     BoolVarAccess returns BoolVarAccess
	 *
	 * Constraint:
	 *     boolVarRef=[Referentiable|EString]
	 */
	protected void sequence_BoolVarAccess(ISerializationContext context, BoolVarAccess semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Gx10Package.Literals.BOOL_VAR_ACCESS__BOOL_VAR_REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Gx10Package.Literals.BOOL_VAR_ACCESS__BOOL_VAR_REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBoolVarAccessAccess().getBoolVarRefReferentiableEStringParserRuleCall_1_0_1(), semanticObject.getBoolVarRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns BoolVar
	 *     Expression returns BoolVar
	 *     BoolVar returns BoolVar
	 *
	 * Constraint:
	 *     (boolVarExpr=BoolExpression boolVarName=Referentiable)
	 */
	protected void sequence_BoolVar(ISerializationContext context, BoolVar semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Gx10Package.Literals.BOOL_VAR__BOOL_VAR_EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Gx10Package.Literals.BOOL_VAR__BOOL_VAR_EXPR));
			if (transientValues.isValueTransient(semanticObject, Gx10Package.Literals.BOOL_VAR__BOOL_VAR_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Gx10Package.Literals.BOOL_VAR__BOOL_VAR_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBoolVarAccess().getBoolVarExprBoolExpressionParserRuleCall_3_0(), semanticObject.getBoolVarExpr());
		feeder.accept(grammarAccess.getBoolVarAccess().getBoolVarNameReferentiableParserRuleCall_5_0(), semanticObject.getBoolVarName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Equal
	 *     BoolExpression returns Equal
	 *     Expression returns Equal
	 *     Equal returns Equal
	 *
	 * Constraint:
	 *     (leftEqual=IntExpression rightEqual=IntExpression)
	 */
	protected void sequence_Equal(ISerializationContext context, Equal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Gx10Package.Literals.EQUAL__LEFT_EQUAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Gx10Package.Literals.EQUAL__LEFT_EQUAL));
			if (transientValues.isValueTransient(semanticObject, Gx10Package.Literals.EQUAL__RIGHT_EQUAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Gx10Package.Literals.EQUAL__RIGHT_EQUAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEqualAccess().getLeftEqualIntExpressionParserRuleCall_3_0(), semanticObject.getLeftEqual());
		feeder.accept(grammarAccess.getEqualAccess().getRightEqualIntExpressionParserRuleCall_5_0(), semanticObject.getRightEqual());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns False
	 *     BoolExpression returns False
	 *     Expression returns False
	 *     False returns False
	 *
	 * Constraint:
	 *     {False}
	 */
	protected void sequence_False(ISerializationContext context, False semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Finish
	 *     Finish returns Finish
	 *
	 * Constraint:
	 *     finishStatement=Statement
	 */
	protected void sequence_Finish(ISerializationContext context, Finish semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Gx10Package.Literals.FINISH__FINISH_STATEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Gx10Package.Literals.FINISH__FINISH_STATEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFinishAccess().getFinishStatementStatementParserRuleCall_3_0(), semanticObject.getFinishStatement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns If
	 *     If returns If
	 *
	 * Constraint:
	 *     (controlStructureCondition=BoolExpression thenBlock=Block elseBlock=Block)
	 */
	protected void sequence_If(ISerializationContext context, If semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Gx10Package.Literals.CONTROL_STRUCTURE__CONTROL_STRUCTURE_CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Gx10Package.Literals.CONTROL_STRUCTURE__CONTROL_STRUCTURE_CONDITION));
			if (transientValues.isValueTransient(semanticObject, Gx10Package.Literals.IF__THEN_BLOCK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Gx10Package.Literals.IF__THEN_BLOCK));
			if (transientValues.isValueTransient(semanticObject, Gx10Package.Literals.IF__ELSE_BLOCK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Gx10Package.Literals.IF__ELSE_BLOCK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIfAccess().getControlStructureConditionBoolExpressionParserRuleCall_3_0(), semanticObject.getControlStructureCondition());
		feeder.accept(grammarAccess.getIfAccess().getThenBlockBlockParserRuleCall_5_0(), semanticObject.getThenBlock());
		feeder.accept(grammarAccess.getIfAccess().getElseBlockBlockParserRuleCall_7_0(), semanticObject.getElseBlock());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns IntConst
	 *     IntExpression returns IntConst
	 *     Expression returns IntConst
	 *     IntConst returns IntConst
	 *
	 * Constraint:
	 *     value=EInt
	 */
	protected void sequence_IntConst(ISerializationContext context, IntConst semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Gx10Package.Literals.INT_CONST__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Gx10Package.Literals.INT_CONST__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntConstAccess().getValueEIntParserRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns IntVarAccess
	 *     IntExpression returns IntVarAccess
	 *     Expression returns IntVarAccess
	 *     IntVarAccess returns IntVarAccess
	 *
	 * Constraint:
	 *     intVarRef=[Referentiable|EString]
	 */
	protected void sequence_IntVarAccess(ISerializationContext context, IntVarAccess semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Gx10Package.Literals.INT_VAR_ACCESS__INT_VAR_REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Gx10Package.Literals.INT_VAR_ACCESS__INT_VAR_REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntVarAccessAccess().getIntVarRefReferentiableEStringParserRuleCall_1_0_1(), semanticObject.getIntVarRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns IntVar
	 *     IntVar returns IntVar
	 *
	 * Constraint:
	 *     (intVarName=Referentiable intVarExpr=IntExpression)
	 */
	protected void sequence_IntVar(ISerializationContext context, IntVar semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Gx10Package.Literals.INT_VAR__INT_VAR_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Gx10Package.Literals.INT_VAR__INT_VAR_NAME));
			if (transientValues.isValueTransient(semanticObject, Gx10Package.Literals.INT_VAR__INT_VAR_EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Gx10Package.Literals.INT_VAR__INT_VAR_EXPR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntVarAccess().getIntVarNameReferentiableParserRuleCall_1_0(), semanticObject.getIntVarName());
		feeder.accept(grammarAccess.getIntVarAccess().getIntVarExprIntExpressionParserRuleCall_3_0(), semanticObject.getIntVarExpr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MethodCallParameter returns MethodCallParameter
	 *
	 * Constraint:
	 *     (name=EString methodCallParameterExpr=IntExpression)
	 */
	protected void sequence_MethodCallParameter(ISerializationContext context, MethodCallParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Gx10Package.Literals.METHOD_CALL_PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Gx10Package.Literals.METHOD_CALL_PARAMETER__NAME));
			if (transientValues.isValueTransient(semanticObject, Gx10Package.Literals.METHOD_CALL_PARAMETER__METHOD_CALL_PARAMETER_EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Gx10Package.Literals.METHOD_CALL_PARAMETER__METHOD_CALL_PARAMETER_EXPR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMethodCallParameterAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMethodCallParameterAccess().getMethodCallParameterExprIntExpressionParserRuleCall_4_0(), semanticObject.getMethodCallParameterExpr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns MethodCall
	 *     Expression returns MethodCall
	 *     MethodCall returns MethodCall
	 *
	 * Constraint:
	 *     (methodToCall=[Method|EString] (methodCallParameters+=MethodCallParameter methodCallParameters+=MethodCallParameter*)?)
	 */
	protected void sequence_MethodCall(ISerializationContext context, MethodCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Method returns Method
	 *
	 * Constraint:
	 *     (name=EString (methodParameters+=Referentiable methodParameters+=Referentiable*)? methodBlock=Block)
	 */
	protected void sequence_Method(ISerializationContext context, Method semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Not
	 *     BoolExpression returns Not
	 *     Expression returns Not
	 *     Not returns Not
	 *
	 * Constraint:
	 *     notExpression=BoolExpression
	 */
	protected void sequence_Not(ISerializationContext context, Not semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Gx10Package.Literals.NOT__NOT_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Gx10Package.Literals.NOT__NOT_EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNotAccess().getNotExpressionBoolExpressionParserRuleCall_3_0(), semanticObject.getNotExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Plus
	 *     IntBinaryOperation returns Plus
	 *     IntExpression returns Plus
	 *     Expression returns Plus
	 *     Plus returns Plus
	 *
	 * Constraint:
	 *     (leftBinaryExpression=IntExpression rightBinaryExpression=IntExpression)
	 */
	protected void sequence_Plus(ISerializationContext context, Plus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Gx10Package.Literals.INT_BINARY_OPERATION__LEFT_BINARY_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Gx10Package.Literals.INT_BINARY_OPERATION__LEFT_BINARY_EXPRESSION));
			if (transientValues.isValueTransient(semanticObject, Gx10Package.Literals.INT_BINARY_OPERATION__RIGHT_BINARY_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Gx10Package.Literals.INT_BINARY_OPERATION__RIGHT_BINARY_EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPlusAccess().getLeftBinaryExpressionIntExpressionParserRuleCall_3_0(), semanticObject.getLeftBinaryExpression());
		feeder.accept(grammarAccess.getPlusAccess().getRightBinaryExpressionIntExpressionParserRuleCall_5_0(), semanticObject.getRightBinaryExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Print
	 *     Print returns Print
	 *
	 * Constraint:
	 *     toPrint=Expression
	 */
	protected void sequence_Print(ISerializationContext context, Print semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Gx10Package.Literals.PRINT__TO_PRINT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Gx10Package.Literals.PRINT__TO_PRINT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrintAccess().getToPrintExpressionParserRuleCall_2_0(), semanticObject.getToPrint());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     (startMethod=[Method|EString] methods+=Method*)
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Referentiable returns Referentiable
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Referentiable(ISerializationContext context, Referentiable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Gx10Package.Literals.REFERENTIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Gx10Package.Literals.REFERENTIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReferentiableAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Time
	 *     IntBinaryOperation returns Time
	 *     IntExpression returns Time
	 *     Expression returns Time
	 *     Time returns Time
	 *
	 * Constraint:
	 *     (leftBinaryExpression=IntExpression rightBinaryExpression=IntExpression)
	 */
	protected void sequence_Time(ISerializationContext context, Time semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Gx10Package.Literals.INT_BINARY_OPERATION__LEFT_BINARY_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Gx10Package.Literals.INT_BINARY_OPERATION__LEFT_BINARY_EXPRESSION));
			if (transientValues.isValueTransient(semanticObject, Gx10Package.Literals.INT_BINARY_OPERATION__RIGHT_BINARY_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Gx10Package.Literals.INT_BINARY_OPERATION__RIGHT_BINARY_EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimeAccess().getLeftBinaryExpressionIntExpressionParserRuleCall_3_0(), semanticObject.getLeftBinaryExpression());
		feeder.accept(grammarAccess.getTimeAccess().getRightBinaryExpressionIntExpressionParserRuleCall_5_0(), semanticObject.getRightBinaryExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns True
	 *     BoolExpression returns True
	 *     Expression returns True
	 *     True returns True
	 *
	 * Constraint:
	 *     {True}
	 */
	protected void sequence_True(ISerializationContext context, True semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns While
	 *     While returns While
	 *
	 * Constraint:
	 *     (controlStructureCondition=BoolExpression whileBlock=Block)
	 */
	protected void sequence_While(ISerializationContext context, While semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Gx10Package.Literals.CONTROL_STRUCTURE__CONTROL_STRUCTURE_CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Gx10Package.Literals.CONTROL_STRUCTURE__CONTROL_STRUCTURE_CONDITION));
			if (transientValues.isValueTransient(semanticObject, Gx10Package.Literals.WHILE__WHILE_BLOCK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Gx10Package.Literals.WHILE__WHILE_BLOCK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWhileAccess().getControlStructureConditionBoolExpressionParserRuleCall_3_0(), semanticObject.getControlStructureCondition());
		feeder.accept(grammarAccess.getWhileAccess().getWhileBlockBlockParserRuleCall_5_0(), semanticObject.getWhileBlock());
		feeder.finish();
	}
	
	
}
