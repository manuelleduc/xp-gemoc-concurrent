/*
 * generated by Xtext 2.9.2
 */
package fr.mleduc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GX10GrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.GX10.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStartMethodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cStartMethodMethodCrossReference_1_0 = (CrossReference)cStartMethodAssignment_1.eContents().get(0);
		private final RuleCall cStartMethodMethodEStringParserRuleCall_1_0_1 = (RuleCall)cStartMethodMethodCrossReference_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMethodsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMethodsMethodParserRuleCall_3_0 = (RuleCall)cMethodsAssignment_3.eContents().get(0);
		
		//Program:
		//	'main' startMethod=[Method|EString] ';'
		//	methods+=Method*;
		@Override public ParserRule getRule() { return rule; }
		
		//'main' startMethod=[Method|EString] ';' methods+=Method*
		public Group getGroup() { return cGroup; }
		
		//'main'
		public Keyword getMainKeyword_0() { return cMainKeyword_0; }
		
		//startMethod=[Method|EString]
		public Assignment getStartMethodAssignment_1() { return cStartMethodAssignment_1; }
		
		//[Method|EString]
		public CrossReference getStartMethodMethodCrossReference_1_0() { return cStartMethodMethodCrossReference_1_0; }
		
		//EString
		public RuleCall getStartMethodMethodEStringParserRuleCall_1_0_1() { return cStartMethodMethodEStringParserRuleCall_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//methods+=Method*
		public Assignment getMethodsAssignment_3() { return cMethodsAssignment_3; }
		
		//Method
		public RuleCall getMethodsMethodParserRuleCall_3_0() { return cMethodsMethodParserRuleCall_3_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.GX10.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWhileParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTrueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFalseParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNotParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAndParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cIntConstParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cPlusParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cAsyncParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cMethodCallParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cFinishParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cPrintParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cBoolVarParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cIntVarParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cIntVarAccessParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cBoolVarAccessParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cEqualParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		
		//Statement:
		//	Block | If | While | True | False | Not | And | IntConst | Plus | Async | MethodCall | Finish | Print | BoolVar |
		//	IntVar | IntVarAccess | BoolVarAccess | Equal;
		@Override public ParserRule getRule() { return rule; }
		
		//Block | If | While | True | False | Not | And | IntConst | Plus | Async | MethodCall | Finish | Print | BoolVar | IntVar
		//| IntVarAccess | BoolVarAccess | Equal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Block
		public RuleCall getBlockParserRuleCall_0() { return cBlockParserRuleCall_0; }
		
		//If
		public RuleCall getIfParserRuleCall_1() { return cIfParserRuleCall_1; }
		
		//While
		public RuleCall getWhileParserRuleCall_2() { return cWhileParserRuleCall_2; }
		
		//True
		public RuleCall getTrueParserRuleCall_3() { return cTrueParserRuleCall_3; }
		
		//False
		public RuleCall getFalseParserRuleCall_4() { return cFalseParserRuleCall_4; }
		
		//Not
		public RuleCall getNotParserRuleCall_5() { return cNotParserRuleCall_5; }
		
		//And
		public RuleCall getAndParserRuleCall_6() { return cAndParserRuleCall_6; }
		
		//IntConst
		public RuleCall getIntConstParserRuleCall_7() { return cIntConstParserRuleCall_7; }
		
		//Plus
		public RuleCall getPlusParserRuleCall_8() { return cPlusParserRuleCall_8; }
		
		//Async
		public RuleCall getAsyncParserRuleCall_9() { return cAsyncParserRuleCall_9; }
		
		//MethodCall
		public RuleCall getMethodCallParserRuleCall_10() { return cMethodCallParserRuleCall_10; }
		
		//Finish
		public RuleCall getFinishParserRuleCall_11() { return cFinishParserRuleCall_11; }
		
		//Print
		public RuleCall getPrintParserRuleCall_12() { return cPrintParserRuleCall_12; }
		
		//BoolVar
		public RuleCall getBoolVarParserRuleCall_13() { return cBoolVarParserRuleCall_13; }
		
		//IntVar
		public RuleCall getIntVarParserRuleCall_14() { return cIntVarParserRuleCall_14; }
		
		//IntVarAccess
		public RuleCall getIntVarAccessParserRuleCall_15() { return cIntVarAccessParserRuleCall_15; }
		
		//BoolVarAccess
		public RuleCall getBoolVarAccessParserRuleCall_16() { return cBoolVarAccessParserRuleCall_16; }
		
		//Equal
		public RuleCall getEqualParserRuleCall_17() { return cEqualParserRuleCall_17; }
	}
	public class BoolExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.GX10.BoolExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTrueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFalseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNotParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAndParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBoolVarAccessParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEqualParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//BoolExpression:
		//	True | False | Not | And | BoolVarAccess | Equal;
		@Override public ParserRule getRule() { return rule; }
		
		//True | False | Not | And | BoolVarAccess | Equal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//True
		public RuleCall getTrueParserRuleCall_0() { return cTrueParserRuleCall_0; }
		
		//False
		public RuleCall getFalseParserRuleCall_1() { return cFalseParserRuleCall_1; }
		
		//Not
		public RuleCall getNotParserRuleCall_2() { return cNotParserRuleCall_2; }
		
		//And
		public RuleCall getAndParserRuleCall_3() { return cAndParserRuleCall_3; }
		
		//BoolVarAccess
		public RuleCall getBoolVarAccessParserRuleCall_4() { return cBoolVarAccessParserRuleCall_4; }
		
		//Equal
		public RuleCall getEqualParserRuleCall_5() { return cEqualParserRuleCall_5; }
	}
	public class IntExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.GX10.IntExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntConstParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPlusParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntVarAccessParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//IntExpression:
		//	IntConst | Plus | IntVarAccess;
		@Override public ParserRule getRule() { return rule; }
		
		//IntConst | Plus | IntVarAccess
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntConst
		public RuleCall getIntConstParserRuleCall_0() { return cIntConstParserRuleCall_0; }
		
		//Plus
		public RuleCall getPlusParserRuleCall_1() { return cPlusParserRuleCall_1; }
		
		//IntVarAccess
		public RuleCall getIntVarAccessParserRuleCall_2() { return cIntVarAccessParserRuleCall_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.GX10.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTrueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFalseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNotParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAndParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIntConstParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPlusParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMethodCallParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cBoolVarParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cIntVarAccessParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cBoolVarAccessParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cEqualParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//Expression:
		//	True | False | Not | And | IntConst | Plus | MethodCall | BoolVar | IntVarAccess | BoolVarAccess | Equal;
		@Override public ParserRule getRule() { return rule; }
		
		//True | False | Not | And | IntConst | Plus | MethodCall | BoolVar | IntVarAccess | BoolVarAccess | Equal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//True
		public RuleCall getTrueParserRuleCall_0() { return cTrueParserRuleCall_0; }
		
		//False
		public RuleCall getFalseParserRuleCall_1() { return cFalseParserRuleCall_1; }
		
		//Not
		public RuleCall getNotParserRuleCall_2() { return cNotParserRuleCall_2; }
		
		//And
		public RuleCall getAndParserRuleCall_3() { return cAndParserRuleCall_3; }
		
		//IntConst
		public RuleCall getIntConstParserRuleCall_4() { return cIntConstParserRuleCall_4; }
		
		//Plus
		public RuleCall getPlusParserRuleCall_5() { return cPlusParserRuleCall_5; }
		
		//MethodCall
		public RuleCall getMethodCallParserRuleCall_6() { return cMethodCallParserRuleCall_6; }
		
		//BoolVar
		public RuleCall getBoolVarParserRuleCall_7() { return cBoolVarParserRuleCall_7; }
		
		//IntVarAccess
		public RuleCall getIntVarAccessParserRuleCall_8() { return cIntVarAccessParserRuleCall_8; }
		
		//BoolVarAccess
		public RuleCall getBoolVarAccessParserRuleCall_9() { return cBoolVarAccessParserRuleCall_9; }
		
		//Equal
		public RuleCall getEqualParserRuleCall_10() { return cEqualParserRuleCall_10; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.GX10.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cMethodBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMethodBlockBlockParserRuleCall_1_0 = (RuleCall)cMethodBlockAssignment_1.eContents().get(0);
		
		//Method:
		//	name=EString
		//	methodBlock=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString methodBlock=Block
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//methodBlock=Block
		public Assignment getMethodBlockAssignment_1() { return cMethodBlockAssignment_1; }
		
		//Block
		public RuleCall getMethodBlockBlockParserRuleCall_1_0() { return cMethodBlockBlockParserRuleCall_1_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.GX10.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBlockStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockStatementsStatementParserRuleCall_2_0 = (RuleCall)cBlockStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Block:
		//	{Block}
		//	'{'
		//	blockStatements+=Statement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Block} '{' blockStatements+=Statement* '}'
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//blockStatements+=Statement*
		public Assignment getBlockStatementsAssignment_2() { return cBlockStatementsAssignment_2; }
		
		//Statement
		public RuleCall getBlockStatementsStatementParserRuleCall_2_0() { return cBlockStatementsStatementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.GX10.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class MethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.GX10.MethodCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMethodCallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cMethodToCallKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMethodToCallAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cMethodToCallMethodCrossReference_3_0 = (CrossReference)cMethodToCallAssignment_3.eContents().get(0);
		private final RuleCall cMethodToCallMethodEStringParserRuleCall_3_0_1 = (RuleCall)cMethodToCallMethodCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MethodCall:
		//	'MethodCall'
		//	'{'
		//	'methodToCall' methodToCall=[Method|EString]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'MethodCall' '{' 'methodToCall' methodToCall=[Method|EString] '}'
		public Group getGroup() { return cGroup; }
		
		//'MethodCall'
		public Keyword getMethodCallKeyword_0() { return cMethodCallKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'methodToCall'
		public Keyword getMethodToCallKeyword_2() { return cMethodToCallKeyword_2; }
		
		//methodToCall=[Method|EString]
		public Assignment getMethodToCallAssignment_3() { return cMethodToCallAssignment_3; }
		
		//[Method|EString]
		public CrossReference getMethodToCallMethodCrossReference_3_0() { return cMethodToCallMethodCrossReference_3_0; }
		
		//EString
		public RuleCall getMethodToCallMethodEStringParserRuleCall_3_0_1() { return cMethodToCallMethodEStringParserRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.GX10.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cControlStructureConditionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cControlStructureConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cControlStructureConditionBoolExpressionParserRuleCall_3_0 = (RuleCall)cControlStructureConditionAssignment_3.eContents().get(0);
		private final Keyword cThenBlockKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThenBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenBlockBlockParserRuleCall_5_0 = (RuleCall)cThenBlockAssignment_5.eContents().get(0);
		private final Keyword cElseBlockKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cElseBlockAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cElseBlockBlockParserRuleCall_7_0 = (RuleCall)cElseBlockAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//If:
		//	'If'
		//	'{'
		//	'controlStructureCondition' controlStructureCondition=BoolExpression
		//	'thenBlock' thenBlock=Block
		//	'elseBlock' elseBlock=Block
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'If' '{' 'controlStructureCondition' controlStructureCondition=BoolExpression 'thenBlock' thenBlock=Block 'elseBlock'
		//elseBlock=Block '}'
		public Group getGroup() { return cGroup; }
		
		//'If'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'controlStructureCondition'
		public Keyword getControlStructureConditionKeyword_2() { return cControlStructureConditionKeyword_2; }
		
		//controlStructureCondition=BoolExpression
		public Assignment getControlStructureConditionAssignment_3() { return cControlStructureConditionAssignment_3; }
		
		//BoolExpression
		public RuleCall getControlStructureConditionBoolExpressionParserRuleCall_3_0() { return cControlStructureConditionBoolExpressionParserRuleCall_3_0; }
		
		//'thenBlock'
		public Keyword getThenBlockKeyword_4() { return cThenBlockKeyword_4; }
		
		//thenBlock=Block
		public Assignment getThenBlockAssignment_5() { return cThenBlockAssignment_5; }
		
		//Block
		public RuleCall getThenBlockBlockParserRuleCall_5_0() { return cThenBlockBlockParserRuleCall_5_0; }
		
		//'elseBlock'
		public Keyword getElseBlockKeyword_6() { return cElseBlockKeyword_6; }
		
		//elseBlock=Block
		public Assignment getElseBlockAssignment_7() { return cElseBlockAssignment_7; }
		
		//Block
		public RuleCall getElseBlockBlockParserRuleCall_7_0() { return cElseBlockBlockParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.GX10.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cControlStructureConditionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cControlStructureConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cControlStructureConditionBoolExpressionParserRuleCall_3_0 = (RuleCall)cControlStructureConditionAssignment_3.eContents().get(0);
		private final Keyword cWhileBlockKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cWhileBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cWhileBlockBlockParserRuleCall_5_0 = (RuleCall)cWhileBlockAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//While:
		//	'While'
		//	'{'
		//	'controlStructureCondition' controlStructureCondition=BoolExpression
		//	'whileBlock' whileBlock=Block
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'While' '{' 'controlStructureCondition' controlStructureCondition=BoolExpression 'whileBlock' whileBlock=Block '}'
		public Group getGroup() { return cGroup; }
		
		//'While'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'controlStructureCondition'
		public Keyword getControlStructureConditionKeyword_2() { return cControlStructureConditionKeyword_2; }
		
		//controlStructureCondition=BoolExpression
		public Assignment getControlStructureConditionAssignment_3() { return cControlStructureConditionAssignment_3; }
		
		//BoolExpression
		public RuleCall getControlStructureConditionBoolExpressionParserRuleCall_3_0() { return cControlStructureConditionBoolExpressionParserRuleCall_3_0; }
		
		//'whileBlock'
		public Keyword getWhileBlockKeyword_4() { return cWhileBlockKeyword_4; }
		
		//whileBlock=Block
		public Assignment getWhileBlockAssignment_5() { return cWhileBlockAssignment_5; }
		
		//Block
		public RuleCall getWhileBlockBlockParserRuleCall_5_0() { return cWhileBlockBlockParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class TrueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.GX10.True");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTrueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTrueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//True:
		//	{True}
		//	'True';
		@Override public ParserRule getRule() { return rule; }
		
		//{True} 'True'
		public Group getGroup() { return cGroup; }
		
		//{True}
		public Action getTrueAction_0() { return cTrueAction_0; }
		
		//'True'
		public Keyword getTrueKeyword_1() { return cTrueKeyword_1; }
	}
	public class FalseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.GX10.False");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFalseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//False:
		//	{False}
		//	'False';
		@Override public ParserRule getRule() { return rule; }
		
		//{False} 'False'
		public Group getGroup() { return cGroup; }
		
		//{False}
		public Action getFalseAction_0() { return cFalseAction_0; }
		
		//'False'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.GX10.Not");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNotExpressionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNotExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNotExpressionBoolExpressionParserRuleCall_3_0 = (RuleCall)cNotExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Not:
		//	'Not'
		//	'{'
		//	'notExpression' notExpression=BoolExpression
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Not' '{' 'notExpression' notExpression=BoolExpression '}'
		public Group getGroup() { return cGroup; }
		
		//'Not'
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'notExpression'
		public Keyword getNotExpressionKeyword_2() { return cNotExpressionKeyword_2; }
		
		//notExpression=BoolExpression
		public Assignment getNotExpressionAssignment_3() { return cNotExpressionAssignment_3; }
		
		//BoolExpression
		public RuleCall getNotExpressionBoolExpressionParserRuleCall_3_0() { return cNotExpressionBoolExpressionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.GX10.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftAndExpressionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLeftAndExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLeftAndExpressionBoolExpressionParserRuleCall_3_0 = (RuleCall)cLeftAndExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightAndExpressionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRightAndExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRightAndExpressionBoolExpressionParserRuleCall_5_0 = (RuleCall)cRightAndExpressionAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//And:
		//	'And'
		//	'{'
		//	'leftAndExpression' leftAndExpression=BoolExpression
		//	'rightAndExpression' rightAndExpression=BoolExpression
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'And' '{' 'leftAndExpression' leftAndExpression=BoolExpression 'rightAndExpression' rightAndExpression=BoolExpression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'And'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'leftAndExpression'
		public Keyword getLeftAndExpressionKeyword_2() { return cLeftAndExpressionKeyword_2; }
		
		//leftAndExpression=BoolExpression
		public Assignment getLeftAndExpressionAssignment_3() { return cLeftAndExpressionAssignment_3; }
		
		//BoolExpression
		public RuleCall getLeftAndExpressionBoolExpressionParserRuleCall_3_0() { return cLeftAndExpressionBoolExpressionParserRuleCall_3_0; }
		
		//'rightAndExpression'
		public Keyword getRightAndExpressionKeyword_4() { return cRightAndExpressionKeyword_4; }
		
		//rightAndExpression=BoolExpression
		public Assignment getRightAndExpressionAssignment_5() { return cRightAndExpressionAssignment_5; }
		
		//BoolExpression
		public RuleCall getRightAndExpressionBoolExpressionParserRuleCall_5_0() { return cRightAndExpressionBoolExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class IntConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.GX10.IntConst");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueEIntParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IntConst:
		//	'IntConst'
		//	'{'
		//	'value' value=EInt
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'IntConst' '{' 'value' value=EInt '}'
		public Group getGroup() { return cGroup; }
		
		//'IntConst'
		public Keyword getIntConstKeyword_0() { return cIntConstKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'value'
		public Keyword getValueKeyword_2() { return cValueKeyword_2; }
		
		//value=EInt
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_3_0() { return cValueEIntParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.GX10.Plus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftPlusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLeftPlusAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLeftPlusIntExpressionParserRuleCall_3_0 = (RuleCall)cLeftPlusAssignment_3.eContents().get(0);
		private final Keyword cRightPlusKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRightPlusAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRightPlusIntExpressionParserRuleCall_5_0 = (RuleCall)cRightPlusAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Plus:
		//	'Plus'
		//	'{'
		//	'leftPlus' leftPlus=IntExpression
		//	'rightPlus' rightPlus=IntExpression
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Plus' '{' 'leftPlus' leftPlus=IntExpression 'rightPlus' rightPlus=IntExpression '}'
		public Group getGroup() { return cGroup; }
		
		//'Plus'
		public Keyword getPlusKeyword_0() { return cPlusKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'leftPlus'
		public Keyword getLeftPlusKeyword_2() { return cLeftPlusKeyword_2; }
		
		//leftPlus=IntExpression
		public Assignment getLeftPlusAssignment_3() { return cLeftPlusAssignment_3; }
		
		//IntExpression
		public RuleCall getLeftPlusIntExpressionParserRuleCall_3_0() { return cLeftPlusIntExpressionParserRuleCall_3_0; }
		
		//'rightPlus'
		public Keyword getRightPlusKeyword_4() { return cRightPlusKeyword_4; }
		
		//rightPlus=IntExpression
		public Assignment getRightPlusAssignment_5() { return cRightPlusAssignment_5; }
		
		//IntExpression
		public RuleCall getRightPlusIntExpressionParserRuleCall_5_0() { return cRightPlusIntExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class AsyncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.GX10.Async");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsyncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAsyncBlockKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAsyncBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAsyncBlockStatementParserRuleCall_3_0 = (RuleCall)cAsyncBlockAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Async:
		//	'Async'
		//	'{'
		//	'asyncBlock' asyncBlock=Statement
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Async' '{' 'asyncBlock' asyncBlock=Statement '}'
		public Group getGroup() { return cGroup; }
		
		//'Async'
		public Keyword getAsyncKeyword_0() { return cAsyncKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'asyncBlock'
		public Keyword getAsyncBlockKeyword_2() { return cAsyncBlockKeyword_2; }
		
		//asyncBlock=Statement
		public Assignment getAsyncBlockAssignment_3() { return cAsyncBlockAssignment_3; }
		
		//Statement
		public RuleCall getAsyncBlockStatementParserRuleCall_3_0() { return cAsyncBlockStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class FinishElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.GX10.Finish");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFinishKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFinishStatementKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFinishStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFinishStatementStatementParserRuleCall_3_0 = (RuleCall)cFinishStatementAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Finish:
		//	'Finish'
		//	'{'
		//	'finishStatement' finishStatement=Statement
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Finish' '{' 'finishStatement' finishStatement=Statement '}'
		public Group getGroup() { return cGroup; }
		
		//'Finish'
		public Keyword getFinishKeyword_0() { return cFinishKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'finishStatement'
		public Keyword getFinishStatementKeyword_2() { return cFinishStatementKeyword_2; }
		
		//finishStatement=Statement
		public Assignment getFinishStatementAssignment_3() { return cFinishStatementAssignment_3; }
		
		//Statement
		public RuleCall getFinishStatementStatementParserRuleCall_3_0() { return cFinishStatementStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.GX10.Print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cToPrintKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cToPrintAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cToPrintExpressionParserRuleCall_3_0 = (RuleCall)cToPrintAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Print:
		//	'Print'
		//	'{'
		//	'toPrint' toPrint=Expression
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Print' '{' 'toPrint' toPrint=Expression '}'
		public Group getGroup() { return cGroup; }
		
		//'Print'
		public Keyword getPrintKeyword_0() { return cPrintKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'toPrint'
		public Keyword getToPrintKeyword_2() { return cToPrintKeyword_2; }
		
		//toPrint=Expression
		public Assignment getToPrintAssignment_3() { return cToPrintAssignment_3; }
		
		//Expression
		public RuleCall getToPrintExpressionParserRuleCall_3_0() { return cToPrintExpressionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class BoolVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.GX10.BoolVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoolVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cBoolVarExprKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBoolVarExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBoolVarExprBoolExpressionParserRuleCall_4_0 = (RuleCall)cBoolVarExprAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BoolVar:
		//	'BoolVar'
		//	name=EString
		//	'{'
		//	'boolVarExpr' boolVarExpr=BoolExpression
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'BoolVar' name=EString '{' 'boolVarExpr' boolVarExpr=BoolExpression '}'
		public Group getGroup() { return cGroup; }
		
		//'BoolVar'
		public Keyword getBoolVarKeyword_0() { return cBoolVarKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'boolVarExpr'
		public Keyword getBoolVarExprKeyword_3() { return cBoolVarExprKeyword_3; }
		
		//boolVarExpr=BoolExpression
		public Assignment getBoolVarExprAssignment_4() { return cBoolVarExprAssignment_4; }
		
		//BoolExpression
		public RuleCall getBoolVarExprBoolExpressionParserRuleCall_4_0() { return cBoolVarExprBoolExpressionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class IntVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.GX10.IntVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cIntVarExprKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIntVarExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIntVarExprIntExpressionParserRuleCall_4_0 = (RuleCall)cIntVarExprAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//IntVar:
		//	'IntVar'
		//	name=EString
		//	'{'
		//	'intVarExpr' intVarExpr=IntExpression
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'IntVar' name=EString '{' 'intVarExpr' intVarExpr=IntExpression '}'
		public Group getGroup() { return cGroup; }
		
		//'IntVar'
		public Keyword getIntVarKeyword_0() { return cIntVarKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'intVarExpr'
		public Keyword getIntVarExprKeyword_3() { return cIntVarExprKeyword_3; }
		
		//intVarExpr=IntExpression
		public Assignment getIntVarExprAssignment_4() { return cIntVarExprAssignment_4; }
		
		//IntExpression
		public RuleCall getIntVarExprIntExpressionParserRuleCall_4_0() { return cIntVarExprIntExpressionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class IntVarAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.GX10.IntVarAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntVarAccessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cIntVarRefKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIntVarRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cIntVarRefIntVarCrossReference_3_0 = (CrossReference)cIntVarRefAssignment_3.eContents().get(0);
		private final RuleCall cIntVarRefIntVarEStringParserRuleCall_3_0_1 = (RuleCall)cIntVarRefIntVarCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IntVarAccess:
		//	'IntVarAccess'
		//	'{'
		//	'intVarRef' intVarRef=[IntVar|EString]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'IntVarAccess' '{' 'intVarRef' intVarRef=[IntVar|EString] '}'
		public Group getGroup() { return cGroup; }
		
		//'IntVarAccess'
		public Keyword getIntVarAccessKeyword_0() { return cIntVarAccessKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'intVarRef'
		public Keyword getIntVarRefKeyword_2() { return cIntVarRefKeyword_2; }
		
		//intVarRef=[IntVar|EString]
		public Assignment getIntVarRefAssignment_3() { return cIntVarRefAssignment_3; }
		
		//[IntVar|EString]
		public CrossReference getIntVarRefIntVarCrossReference_3_0() { return cIntVarRefIntVarCrossReference_3_0; }
		
		//EString
		public RuleCall getIntVarRefIntVarEStringParserRuleCall_3_0_1() { return cIntVarRefIntVarEStringParserRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class BoolVarAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.GX10.BoolVarAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoolVarAccessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBoolVarRefKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBoolVarRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cBoolVarRefBoolVarCrossReference_3_0 = (CrossReference)cBoolVarRefAssignment_3.eContents().get(0);
		private final RuleCall cBoolVarRefBoolVarEStringParserRuleCall_3_0_1 = (RuleCall)cBoolVarRefBoolVarCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BoolVarAccess:
		//	'BoolVarAccess'
		//	'{'
		//	'boolVarRef' boolVarRef=[BoolVar|EString]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'BoolVarAccess' '{' 'boolVarRef' boolVarRef=[BoolVar|EString] '}'
		public Group getGroup() { return cGroup; }
		
		//'BoolVarAccess'
		public Keyword getBoolVarAccessKeyword_0() { return cBoolVarAccessKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'boolVarRef'
		public Keyword getBoolVarRefKeyword_2() { return cBoolVarRefKeyword_2; }
		
		//boolVarRef=[BoolVar|EString]
		public Assignment getBoolVarRefAssignment_3() { return cBoolVarRefAssignment_3; }
		
		//[BoolVar|EString]
		public CrossReference getBoolVarRefBoolVarCrossReference_3_0() { return cBoolVarRefBoolVarCrossReference_3_0; }
		
		//EString
		public RuleCall getBoolVarRefBoolVarEStringParserRuleCall_3_0_1() { return cBoolVarRefBoolVarEStringParserRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.GX10.Equal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftEqualKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLeftEqualAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLeftEqualIntExpressionParserRuleCall_3_0 = (RuleCall)cLeftEqualAssignment_3.eContents().get(0);
		private final Keyword cRightEqualKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRightEqualAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRightEqualIntExpressionParserRuleCall_5_0 = (RuleCall)cRightEqualAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Equal:
		//	'Equal'
		//	'{'
		//	'leftEqual' leftEqual=IntExpression
		//	'rightEqual' rightEqual=IntExpression
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Equal' '{' 'leftEqual' leftEqual=IntExpression 'rightEqual' rightEqual=IntExpression '}'
		public Group getGroup() { return cGroup; }
		
		//'Equal'
		public Keyword getEqualKeyword_0() { return cEqualKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'leftEqual'
		public Keyword getLeftEqualKeyword_2() { return cLeftEqualKeyword_2; }
		
		//leftEqual=IntExpression
		public Assignment getLeftEqualAssignment_3() { return cLeftEqualAssignment_3; }
		
		//IntExpression
		public RuleCall getLeftEqualIntExpressionParserRuleCall_3_0() { return cLeftEqualIntExpressionParserRuleCall_3_0; }
		
		//'rightEqual'
		public Keyword getRightEqualKeyword_4() { return cRightEqualKeyword_4; }
		
		//rightEqual=IntExpression
		public Assignment getRightEqualAssignment_5() { return cRightEqualAssignment_5; }
		
		//IntExpression
		public RuleCall getRightEqualIntExpressionParserRuleCall_5_0() { return cRightEqualIntExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.mleduc.GX10.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private final ProgramElements pProgram;
	private final StatementElements pStatement;
	private final BoolExpressionElements pBoolExpression;
	private final IntExpressionElements pIntExpression;
	private final ExpressionElements pExpression;
	private final MethodElements pMethod;
	private final BlockElements pBlock;
	private final EStringElements pEString;
	private final MethodCallElements pMethodCall;
	private final IfElements pIf;
	private final WhileElements pWhile;
	private final TrueElements pTrue;
	private final FalseElements pFalse;
	private final NotElements pNot;
	private final AndElements pAnd;
	private final IntConstElements pIntConst;
	private final PlusElements pPlus;
	private final AsyncElements pAsync;
	private final FinishElements pFinish;
	private final PrintElements pPrint;
	private final BoolVarElements pBoolVar;
	private final IntVarElements pIntVar;
	private final IntVarAccessElements pIntVarAccess;
	private final BoolVarAccessElements pBoolVarAccess;
	private final EqualElements pEqual;
	private final EIntElements pEInt;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GX10GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pStatement = new StatementElements();
		this.pBoolExpression = new BoolExpressionElements();
		this.pIntExpression = new IntExpressionElements();
		this.pExpression = new ExpressionElements();
		this.pMethod = new MethodElements();
		this.pBlock = new BlockElements();
		this.pEString = new EStringElements();
		this.pMethodCall = new MethodCallElements();
		this.pIf = new IfElements();
		this.pWhile = new WhileElements();
		this.pTrue = new TrueElements();
		this.pFalse = new FalseElements();
		this.pNot = new NotElements();
		this.pAnd = new AndElements();
		this.pIntConst = new IntConstElements();
		this.pPlus = new PlusElements();
		this.pAsync = new AsyncElements();
		this.pFinish = new FinishElements();
		this.pPrint = new PrintElements();
		this.pBoolVar = new BoolVarElements();
		this.pIntVar = new IntVarElements();
		this.pIntVarAccess = new IntVarAccessElements();
		this.pBoolVarAccess = new BoolVarAccessElements();
		this.pEqual = new EqualElements();
		this.pEInt = new EIntElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.mleduc.GX10".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	'main' startMethod=[Method|EString] ';'
	//	methods+=Method*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Statement:
	//	Block | If | While | True | False | Not | And | IntConst | Plus | Async | MethodCall | Finish | Print | BoolVar |
	//	IntVar | IntVarAccess | BoolVarAccess | Equal;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//BoolExpression:
	//	True | False | Not | And | BoolVarAccess | Equal;
	public BoolExpressionElements getBoolExpressionAccess() {
		return pBoolExpression;
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}
	
	//IntExpression:
	//	IntConst | Plus | IntVarAccess;
	public IntExpressionElements getIntExpressionAccess() {
		return pIntExpression;
	}
	
	public ParserRule getIntExpressionRule() {
		return getIntExpressionAccess().getRule();
	}
	
	//Expression:
	//	True | False | Not | And | IntConst | Plus | MethodCall | BoolVar | IntVarAccess | BoolVarAccess | Equal;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Method:
	//	name=EString
	//	methodBlock=Block;
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//Block:
	//	{Block}
	//	'{'
	//	blockStatements+=Statement*
	//	'}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//MethodCall:
	//	'MethodCall'
	//	'{'
	//	'methodToCall' methodToCall=[Method|EString]
	//	'}';
	public MethodCallElements getMethodCallAccess() {
		return pMethodCall;
	}
	
	public ParserRule getMethodCallRule() {
		return getMethodCallAccess().getRule();
	}
	
	//If:
	//	'If'
	//	'{'
	//	'controlStructureCondition' controlStructureCondition=BoolExpression
	//	'thenBlock' thenBlock=Block
	//	'elseBlock' elseBlock=Block
	//	'}';
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//While:
	//	'While'
	//	'{'
	//	'controlStructureCondition' controlStructureCondition=BoolExpression
	//	'whileBlock' whileBlock=Block
	//	'}';
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}
	
	//True:
	//	{True}
	//	'True';
	public TrueElements getTrueAccess() {
		return pTrue;
	}
	
	public ParserRule getTrueRule() {
		return getTrueAccess().getRule();
	}
	
	//False:
	//	{False}
	//	'False';
	public FalseElements getFalseAccess() {
		return pFalse;
	}
	
	public ParserRule getFalseRule() {
		return getFalseAccess().getRule();
	}
	
	//Not:
	//	'Not'
	//	'{'
	//	'notExpression' notExpression=BoolExpression
	//	'}';
	public NotElements getNotAccess() {
		return pNot;
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}
	
	//And:
	//	'And'
	//	'{'
	//	'leftAndExpression' leftAndExpression=BoolExpression
	//	'rightAndExpression' rightAndExpression=BoolExpression
	//	'}';
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//IntConst:
	//	'IntConst'
	//	'{'
	//	'value' value=EInt
	//	'}';
	public IntConstElements getIntConstAccess() {
		return pIntConst;
	}
	
	public ParserRule getIntConstRule() {
		return getIntConstAccess().getRule();
	}
	
	//Plus:
	//	'Plus'
	//	'{'
	//	'leftPlus' leftPlus=IntExpression
	//	'rightPlus' rightPlus=IntExpression
	//	'}';
	public PlusElements getPlusAccess() {
		return pPlus;
	}
	
	public ParserRule getPlusRule() {
		return getPlusAccess().getRule();
	}
	
	//Async:
	//	'Async'
	//	'{'
	//	'asyncBlock' asyncBlock=Statement
	//	'}';
	public AsyncElements getAsyncAccess() {
		return pAsync;
	}
	
	public ParserRule getAsyncRule() {
		return getAsyncAccess().getRule();
	}
	
	//Finish:
	//	'Finish'
	//	'{'
	//	'finishStatement' finishStatement=Statement
	//	'}';
	public FinishElements getFinishAccess() {
		return pFinish;
	}
	
	public ParserRule getFinishRule() {
		return getFinishAccess().getRule();
	}
	
	//Print:
	//	'Print'
	//	'{'
	//	'toPrint' toPrint=Expression
	//	'}';
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}
	
	//BoolVar:
	//	'BoolVar'
	//	name=EString
	//	'{'
	//	'boolVarExpr' boolVarExpr=BoolExpression
	//	'}';
	public BoolVarElements getBoolVarAccess() {
		return pBoolVar;
	}
	
	public ParserRule getBoolVarRule() {
		return getBoolVarAccess().getRule();
	}
	
	//IntVar:
	//	'IntVar'
	//	name=EString
	//	'{'
	//	'intVarExpr' intVarExpr=IntExpression
	//	'}';
	public IntVarElements getIntVarAccess() {
		return pIntVar;
	}
	
	public ParserRule getIntVarRule() {
		return getIntVarAccess().getRule();
	}
	
	//IntVarAccess:
	//	'IntVarAccess'
	//	'{'
	//	'intVarRef' intVarRef=[IntVar|EString]
	//	'}';
	public IntVarAccessElements getIntVarAccessAccess() {
		return pIntVarAccess;
	}
	
	public ParserRule getIntVarAccessRule() {
		return getIntVarAccessAccess().getRule();
	}
	
	//BoolVarAccess:
	//	'BoolVarAccess'
	//	'{'
	//	'boolVarRef' boolVarRef=[BoolVar|EString]
	//	'}';
	public BoolVarAccessElements getBoolVarAccessAccess() {
		return pBoolVarAccess;
	}
	
	public ParserRule getBoolVarAccessRule() {
		return getBoolVarAccessAccess().getRule();
	}
	
	//Equal:
	//	'Equal'
	//	'{'
	//	'leftEqual' leftEqual=IntExpression
	//	'rightEqual' rightEqual=IntExpression
	//	'}';
	public EqualElements getEqualAccess() {
		return pEqual;
	}
	
	public ParserRule getEqualRule() {
		return getEqualAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
