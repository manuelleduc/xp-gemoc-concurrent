/*
 * generated by Xtext 2.9.2
 */
grammar InternalGX10;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package fr.mleduc.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.mleduc.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import fr.mleduc.services.GX10GrammarAccess;

}
@parser::members {
	private GX10GrammarAccess grammarAccess;

	public void setGrammarAccess(GX10GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getGroup()); }
		(rule__Program__Group__0)
		{ after(grammarAccess.getProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolExpression
entryRuleBoolExpression
:
{ before(grammarAccess.getBoolExpressionRule()); }
	 ruleBoolExpression
{ after(grammarAccess.getBoolExpressionRule()); } 
	 EOF 
;

// Rule BoolExpression
ruleBoolExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolExpressionAccess().getAlternatives()); }
		(rule__BoolExpression__Alternatives)
		{ after(grammarAccess.getBoolExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntExpression
entryRuleIntExpression
:
{ before(grammarAccess.getIntExpressionRule()); }
	 ruleIntExpression
{ after(grammarAccess.getIntExpressionRule()); } 
	 EOF 
;

// Rule IntExpression
ruleIntExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntExpressionAccess().getAlternatives()); }
		(rule__IntExpression__Alternatives)
		{ after(grammarAccess.getIntExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMethod
entryRuleMethod
:
{ before(grammarAccess.getMethodRule()); }
	 ruleMethod
{ after(grammarAccess.getMethodRule()); } 
	 EOF 
;

// Rule Method
ruleMethod 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMethodAccess().getGroup()); }
		(rule__Method__Group__0)
		{ after(grammarAccess.getMethodAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlock
entryRuleBlock
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockAccess().getGroup()); }
		(rule__Block__Group__0)
		{ after(grammarAccess.getBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMethodCall
entryRuleMethodCall
:
{ before(grammarAccess.getMethodCallRule()); }
	 ruleMethodCall
{ after(grammarAccess.getMethodCallRule()); } 
	 EOF 
;

// Rule MethodCall
ruleMethodCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMethodCallAccess().getGroup()); }
		(rule__MethodCall__Group__0)
		{ after(grammarAccess.getMethodCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIf
entryRuleIf
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfAccess().getGroup()); }
		(rule__If__Group__0)
		{ after(grammarAccess.getIfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhile
entryRuleWhile
:
{ before(grammarAccess.getWhileRule()); }
	 ruleWhile
{ after(grammarAccess.getWhileRule()); } 
	 EOF 
;

// Rule While
ruleWhile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhileAccess().getGroup()); }
		(rule__While__Group__0)
		{ after(grammarAccess.getWhileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTrue
entryRuleTrue
:
{ before(grammarAccess.getTrueRule()); }
	 ruleTrue
{ after(grammarAccess.getTrueRule()); } 
	 EOF 
;

// Rule True
ruleTrue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTrueAccess().getGroup()); }
		(rule__True__Group__0)
		{ after(grammarAccess.getTrueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFalse
entryRuleFalse
:
{ before(grammarAccess.getFalseRule()); }
	 ruleFalse
{ after(grammarAccess.getFalseRule()); } 
	 EOF 
;

// Rule False
ruleFalse 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFalseAccess().getGroup()); }
		(rule__False__Group__0)
		{ after(grammarAccess.getFalseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNot
entryRuleNot
:
{ before(grammarAccess.getNotRule()); }
	 ruleNot
{ after(grammarAccess.getNotRule()); } 
	 EOF 
;

// Rule Not
ruleNot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotAccess().getGroup()); }
		(rule__Not__Group__0)
		{ after(grammarAccess.getNotAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnd
entryRuleAnd
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndAccess().getGroup()); }
		(rule__And__Group__0)
		{ after(grammarAccess.getAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntConst
entryRuleIntConst
:
{ before(grammarAccess.getIntConstRule()); }
	 ruleIntConst
{ after(grammarAccess.getIntConstRule()); } 
	 EOF 
;

// Rule IntConst
ruleIntConst 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntConstAccess().getGroup()); }
		(rule__IntConst__Group__0)
		{ after(grammarAccess.getIntConstAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlus
entryRulePlus
:
{ before(grammarAccess.getPlusRule()); }
	 rulePlus
{ after(grammarAccess.getPlusRule()); } 
	 EOF 
;

// Rule Plus
rulePlus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlusAccess().getGroup()); }
		(rule__Plus__Group__0)
		{ after(grammarAccess.getPlusAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAsync
entryRuleAsync
:
{ before(grammarAccess.getAsyncRule()); }
	 ruleAsync
{ after(grammarAccess.getAsyncRule()); } 
	 EOF 
;

// Rule Async
ruleAsync 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAsyncAccess().getGroup()); }
		(rule__Async__Group__0)
		{ after(grammarAccess.getAsyncAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFinish
entryRuleFinish
:
{ before(grammarAccess.getFinishRule()); }
	 ruleFinish
{ after(grammarAccess.getFinishRule()); } 
	 EOF 
;

// Rule Finish
ruleFinish 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFinishAccess().getGroup()); }
		(rule__Finish__Group__0)
		{ after(grammarAccess.getFinishAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrint
entryRulePrint
:
{ before(grammarAccess.getPrintRule()); }
	 rulePrint
{ after(grammarAccess.getPrintRule()); } 
	 EOF 
;

// Rule Print
rulePrint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrintAccess().getGroup()); }
		(rule__Print__Group__0)
		{ after(grammarAccess.getPrintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolVar
entryRuleBoolVar
:
{ before(grammarAccess.getBoolVarRule()); }
	 ruleBoolVar
{ after(grammarAccess.getBoolVarRule()); } 
	 EOF 
;

// Rule BoolVar
ruleBoolVar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolVarAccess().getGroup()); }
		(rule__BoolVar__Group__0)
		{ after(grammarAccess.getBoolVarAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntVar
entryRuleIntVar
:
{ before(grammarAccess.getIntVarRule()); }
	 ruleIntVar
{ after(grammarAccess.getIntVarRule()); } 
	 EOF 
;

// Rule IntVar
ruleIntVar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntVarAccess().getGroup()); }
		(rule__IntVar__Group__0)
		{ after(grammarAccess.getIntVarAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntVarAccess
entryRuleIntVarAccess
:
{ before(grammarAccess.getIntVarAccessRule()); }
	 ruleIntVarAccess
{ after(grammarAccess.getIntVarAccessRule()); } 
	 EOF 
;

// Rule IntVarAccess
ruleIntVarAccess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntVarAccessAccess().getGroup()); }
		(rule__IntVarAccess__Group__0)
		{ after(grammarAccess.getIntVarAccessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolVarAccess
entryRuleBoolVarAccess
:
{ before(grammarAccess.getBoolVarAccessRule()); }
	 ruleBoolVarAccess
{ after(grammarAccess.getBoolVarAccessRule()); } 
	 EOF 
;

// Rule BoolVarAccess
ruleBoolVarAccess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolVarAccessAccess().getGroup()); }
		(rule__BoolVarAccess__Group__0)
		{ after(grammarAccess.getBoolVarAccessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEqual
entryRuleEqual
:
{ before(grammarAccess.getEqualRule()); }
	 ruleEqual
{ after(grammarAccess.getEqualRule()); } 
	 EOF 
;

// Rule Equal
ruleEqual 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEqualAccess().getGroup()); }
		(rule__Equal__Group__0)
		{ after(grammarAccess.getEqualAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEInt
entryRuleEInt
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEIntAccess().getGroup()); }
		(rule__EInt__Group__0)
		{ after(grammarAccess.getEIntAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getBlockParserRuleCall_0()); }
		ruleBlock
		{ after(grammarAccess.getStatementAccess().getBlockParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getIfParserRuleCall_1()); }
		ruleIf
		{ after(grammarAccess.getStatementAccess().getIfParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getWhileParserRuleCall_2()); }
		ruleWhile
		{ after(grammarAccess.getStatementAccess().getWhileParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getTrueParserRuleCall_3()); }
		ruleTrue
		{ after(grammarAccess.getStatementAccess().getTrueParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getFalseParserRuleCall_4()); }
		ruleFalse
		{ after(grammarAccess.getStatementAccess().getFalseParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getNotParserRuleCall_5()); }
		ruleNot
		{ after(grammarAccess.getStatementAccess().getNotParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getAndParserRuleCall_6()); }
		ruleAnd
		{ after(grammarAccess.getStatementAccess().getAndParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getIntConstParserRuleCall_7()); }
		ruleIntConst
		{ after(grammarAccess.getStatementAccess().getIntConstParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getPlusParserRuleCall_8()); }
		rulePlus
		{ after(grammarAccess.getStatementAccess().getPlusParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getAsyncParserRuleCall_9()); }
		ruleAsync
		{ after(grammarAccess.getStatementAccess().getAsyncParserRuleCall_9()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getMethodCallParserRuleCall_10()); }
		ruleMethodCall
		{ after(grammarAccess.getStatementAccess().getMethodCallParserRuleCall_10()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getFinishParserRuleCall_11()); }
		ruleFinish
		{ after(grammarAccess.getStatementAccess().getFinishParserRuleCall_11()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getPrintParserRuleCall_12()); }
		rulePrint
		{ after(grammarAccess.getStatementAccess().getPrintParserRuleCall_12()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getBoolVarParserRuleCall_13()); }
		ruleBoolVar
		{ after(grammarAccess.getStatementAccess().getBoolVarParserRuleCall_13()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getIntVarParserRuleCall_14()); }
		ruleIntVar
		{ after(grammarAccess.getStatementAccess().getIntVarParserRuleCall_14()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getIntVarAccessParserRuleCall_15()); }
		ruleIntVarAccess
		{ after(grammarAccess.getStatementAccess().getIntVarAccessParserRuleCall_15()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getBoolVarAccessParserRuleCall_16()); }
		ruleBoolVarAccess
		{ after(grammarAccess.getStatementAccess().getBoolVarAccessParserRuleCall_16()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getEqualParserRuleCall_17()); }
		ruleEqual
		{ after(grammarAccess.getStatementAccess().getEqualParserRuleCall_17()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolExpressionAccess().getTrueParserRuleCall_0()); }
		ruleTrue
		{ after(grammarAccess.getBoolExpressionAccess().getTrueParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getBoolExpressionAccess().getFalseParserRuleCall_1()); }
		ruleFalse
		{ after(grammarAccess.getBoolExpressionAccess().getFalseParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getBoolExpressionAccess().getNotParserRuleCall_2()); }
		ruleNot
		{ after(grammarAccess.getBoolExpressionAccess().getNotParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getBoolExpressionAccess().getAndParserRuleCall_3()); }
		ruleAnd
		{ after(grammarAccess.getBoolExpressionAccess().getAndParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getBoolExpressionAccess().getBoolVarAccessParserRuleCall_4()); }
		ruleBoolVarAccess
		{ after(grammarAccess.getBoolExpressionAccess().getBoolVarAccessParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getBoolExpressionAccess().getEqualParserRuleCall_5()); }
		ruleEqual
		{ after(grammarAccess.getBoolExpressionAccess().getEqualParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntExpressionAccess().getIntConstParserRuleCall_0()); }
		ruleIntConst
		{ after(grammarAccess.getIntExpressionAccess().getIntConstParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getIntExpressionAccess().getPlusParserRuleCall_1()); }
		rulePlus
		{ after(grammarAccess.getIntExpressionAccess().getPlusParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getIntExpressionAccess().getIntVarAccessParserRuleCall_2()); }
		ruleIntVarAccess
		{ after(grammarAccess.getIntExpressionAccess().getIntVarAccessParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getTrueParserRuleCall_0()); }
		ruleTrue
		{ after(grammarAccess.getExpressionAccess().getTrueParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getFalseParserRuleCall_1()); }
		ruleFalse
		{ after(grammarAccess.getExpressionAccess().getFalseParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getNotParserRuleCall_2()); }
		ruleNot
		{ after(grammarAccess.getExpressionAccess().getNotParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getAndParserRuleCall_3()); }
		ruleAnd
		{ after(grammarAccess.getExpressionAccess().getAndParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getIntConstParserRuleCall_4()); }
		ruleIntConst
		{ after(grammarAccess.getExpressionAccess().getIntConstParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getPlusParserRuleCall_5()); }
		rulePlus
		{ after(grammarAccess.getExpressionAccess().getPlusParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getMethodCallParserRuleCall_6()); }
		ruleMethodCall
		{ after(grammarAccess.getExpressionAccess().getMethodCallParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getBoolVarParserRuleCall_7()); }
		ruleBoolVar
		{ after(grammarAccess.getExpressionAccess().getBoolVarParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getIntVarAccessParserRuleCall_8()); }
		ruleIntVarAccess
		{ after(grammarAccess.getExpressionAccess().getIntVarAccessParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getBoolVarAccessParserRuleCall_9()); }
		ruleBoolVarAccess
		{ after(grammarAccess.getExpressionAccess().getBoolVarAccessParserRuleCall_9()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getEqualParserRuleCall_10()); }
		ruleEqual
		{ after(grammarAccess.getExpressionAccess().getEqualParserRuleCall_10()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getMainKeyword_0()); }
	'main'
	{ after(grammarAccess.getProgramAccess().getMainKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__1__Impl
	rule__Program__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getStartMethodAssignment_1()); }
	(rule__Program__StartMethodAssignment_1)
	{ after(grammarAccess.getProgramAccess().getStartMethodAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__2__Impl
	rule__Program__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getProgramAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getMethodsAssignment_3()); }
	(rule__Program__MethodsAssignment_3)*
	{ after(grammarAccess.getProgramAccess().getMethodsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__0__Impl
	rule__Method__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getNameAssignment_0()); }
	(rule__Method__NameAssignment_0)
	{ after(grammarAccess.getMethodAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getMethodBlockAssignment_1()); }
	(rule__Method__MethodBlockAssignment_1)
	{ after(grammarAccess.getMethodAccess().getMethodBlockAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getBlockAction_0()); }
	()
	{ after(grammarAccess.getBlockAccess().getBlockAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__2__Impl
	rule__Block__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getBlockStatementsAssignment_2()); }
	(rule__Block__BlockStatementsAssignment_2)*
	{ after(grammarAccess.getBlockAccess().getBlockStatementsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MethodCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodCall__Group__0__Impl
	rule__MethodCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodCallAccess().getMethodCallKeyword_0()); }
	'MethodCall'
	{ after(grammarAccess.getMethodCallAccess().getMethodCallKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodCall__Group__1__Impl
	rule__MethodCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodCallAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getMethodCallAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodCall__Group__2__Impl
	rule__MethodCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodCallAccess().getMethodToCallKeyword_2()); }
	'methodToCall'
	{ after(grammarAccess.getMethodCallAccess().getMethodToCallKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodCall__Group__3__Impl
	rule__MethodCall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodCallAccess().getMethodToCallAssignment_3()); }
	(rule__MethodCall__MethodToCallAssignment_3)
	{ after(grammarAccess.getMethodCallAccess().getMethodToCallAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodCall__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodCallAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getMethodCallAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__0__Impl
	rule__If__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfKeyword_0()); }
	'If'
	{ after(grammarAccess.getIfAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__1__Impl
	rule__If__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getIfAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__2__Impl
	rule__If__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getControlStructureConditionKeyword_2()); }
	'controlStructureCondition'
	{ after(grammarAccess.getIfAccess().getControlStructureConditionKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__3__Impl
	rule__If__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getControlStructureConditionAssignment_3()); }
	(rule__If__ControlStructureConditionAssignment_3)
	{ after(grammarAccess.getIfAccess().getControlStructureConditionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__4__Impl
	rule__If__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getThenBlockKeyword_4()); }
	'thenBlock'
	{ after(grammarAccess.getIfAccess().getThenBlockKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__5__Impl
	rule__If__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getThenBlockAssignment_5()); }
	(rule__If__ThenBlockAssignment_5)
	{ after(grammarAccess.getIfAccess().getThenBlockAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__6__Impl
	rule__If__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getElseBlockKeyword_6()); }
	'elseBlock'
	{ after(grammarAccess.getIfAccess().getElseBlockKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__7__Impl
	rule__If__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getElseBlockAssignment_7()); }
	(rule__If__ElseBlockAssignment_7)
	{ after(grammarAccess.getIfAccess().getElseBlockAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getRightCurlyBracketKeyword_8()); }
	'}'
	{ after(grammarAccess.getIfAccess().getRightCurlyBracketKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__0__Impl
	rule__While__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
	'While'
	{ after(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__1__Impl
	rule__While__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getWhileAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__2__Impl
	rule__While__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getControlStructureConditionKeyword_2()); }
	'controlStructureCondition'
	{ after(grammarAccess.getWhileAccess().getControlStructureConditionKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__3__Impl
	rule__While__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getControlStructureConditionAssignment_3()); }
	(rule__While__ControlStructureConditionAssignment_3)
	{ after(grammarAccess.getWhileAccess().getControlStructureConditionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__4__Impl
	rule__While__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getWhileBlockKeyword_4()); }
	'whileBlock'
	{ after(grammarAccess.getWhileAccess().getWhileBlockKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__5__Impl
	rule__While__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getWhileBlockAssignment_5()); }
	(rule__While__WhileBlockAssignment_5)
	{ after(grammarAccess.getWhileAccess().getWhileBlockAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getWhileAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__True__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__True__Group__0__Impl
	rule__True__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__True__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrueAccess().getTrueAction_0()); }
	()
	{ after(grammarAccess.getTrueAccess().getTrueAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__True__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__True__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__True__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrueAccess().getTrueKeyword_1()); }
	'True'
	{ after(grammarAccess.getTrueAccess().getTrueKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__False__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__False__Group__0__Impl
	rule__False__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__False__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFalseAccess().getFalseAction_0()); }
	()
	{ after(grammarAccess.getFalseAccess().getFalseAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__False__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__False__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__False__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFalseAccess().getFalseKeyword_1()); }
	'False'
	{ after(grammarAccess.getFalseAccess().getFalseKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Not__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group__0__Impl
	rule__Not__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getNotKeyword_0()); }
	'Not'
	{ after(grammarAccess.getNotAccess().getNotKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group__1__Impl
	rule__Not__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getNotAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group__2__Impl
	rule__Not__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getNotExpressionKeyword_2()); }
	'notExpression'
	{ after(grammarAccess.getNotAccess().getNotExpressionKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group__3__Impl
	rule__Not__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getNotExpressionAssignment_3()); }
	(rule__Not__NotExpressionAssignment_3)
	{ after(grammarAccess.getNotAccess().getNotExpressionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getNotAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAndKeyword_0()); }
	'And'
	{ after(grammarAccess.getAndAccess().getAndKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__1__Impl
	rule__And__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getAndAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__2__Impl
	rule__And__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getLeftAndExpressionKeyword_2()); }
	'leftAndExpression'
	{ after(grammarAccess.getAndAccess().getLeftAndExpressionKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__3__Impl
	rule__And__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getLeftAndExpressionAssignment_3()); }
	(rule__And__LeftAndExpressionAssignment_3)
	{ after(grammarAccess.getAndAccess().getLeftAndExpressionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__4__Impl
	rule__And__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getRightAndExpressionKeyword_4()); }
	'rightAndExpression'
	{ after(grammarAccess.getAndAccess().getRightAndExpressionKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__5__Impl
	rule__And__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getRightAndExpressionAssignment_5()); }
	(rule__And__RightAndExpressionAssignment_5)
	{ after(grammarAccess.getAndAccess().getRightAndExpressionAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getAndAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IntConst__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntConst__Group__0__Impl
	rule__IntConst__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntConst__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntConstAccess().getIntConstKeyword_0()); }
	'IntConst'
	{ after(grammarAccess.getIntConstAccess().getIntConstKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntConst__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntConst__Group__1__Impl
	rule__IntConst__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IntConst__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntConstAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getIntConstAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntConst__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntConst__Group__2__Impl
	rule__IntConst__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IntConst__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntConstAccess().getValueKeyword_2()); }
	'value'
	{ after(grammarAccess.getIntConstAccess().getValueKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntConst__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntConst__Group__3__Impl
	rule__IntConst__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IntConst__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntConstAccess().getValueAssignment_3()); }
	(rule__IntConst__ValueAssignment_3)
	{ after(grammarAccess.getIntConstAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntConst__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntConst__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntConst__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntConstAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getIntConstAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Plus__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group__0__Impl
	rule__Plus__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getPlusKeyword_0()); }
	'Plus'
	{ after(grammarAccess.getPlusAccess().getPlusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group__1__Impl
	rule__Plus__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getPlusAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group__2__Impl
	rule__Plus__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getLeftPlusKeyword_2()); }
	'leftPlus'
	{ after(grammarAccess.getPlusAccess().getLeftPlusKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group__3__Impl
	rule__Plus__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getLeftPlusAssignment_3()); }
	(rule__Plus__LeftPlusAssignment_3)
	{ after(grammarAccess.getPlusAccess().getLeftPlusAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group__4__Impl
	rule__Plus__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getRightPlusKeyword_4()); }
	'rightPlus'
	{ after(grammarAccess.getPlusAccess().getRightPlusKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group__5__Impl
	rule__Plus__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getRightPlusAssignment_5()); }
	(rule__Plus__RightPlusAssignment_5)
	{ after(grammarAccess.getPlusAccess().getRightPlusAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Plus__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getPlusAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Async__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Async__Group__0__Impl
	rule__Async__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Async__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsyncAccess().getAsyncKeyword_0()); }
	'Async'
	{ after(grammarAccess.getAsyncAccess().getAsyncKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Async__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Async__Group__1__Impl
	rule__Async__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Async__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsyncAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getAsyncAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Async__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Async__Group__2__Impl
	rule__Async__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Async__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsyncAccess().getAsyncBlockKeyword_2()); }
	'asyncBlock'
	{ after(grammarAccess.getAsyncAccess().getAsyncBlockKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Async__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Async__Group__3__Impl
	rule__Async__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Async__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsyncAccess().getAsyncBlockAssignment_3()); }
	(rule__Async__AsyncBlockAssignment_3)
	{ after(grammarAccess.getAsyncAccess().getAsyncBlockAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Async__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Async__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Async__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsyncAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getAsyncAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Finish__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Finish__Group__0__Impl
	rule__Finish__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Finish__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFinishAccess().getFinishKeyword_0()); }
	'Finish'
	{ after(grammarAccess.getFinishAccess().getFinishKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Finish__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Finish__Group__1__Impl
	rule__Finish__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Finish__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFinishAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getFinishAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Finish__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Finish__Group__2__Impl
	rule__Finish__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Finish__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFinishAccess().getFinishStatementKeyword_2()); }
	'finishStatement'
	{ after(grammarAccess.getFinishAccess().getFinishStatementKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Finish__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Finish__Group__3__Impl
	rule__Finish__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Finish__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFinishAccess().getFinishStatementAssignment_3()); }
	(rule__Finish__FinishStatementAssignment_3)
	{ after(grammarAccess.getFinishAccess().getFinishStatementAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Finish__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Finish__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Finish__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFinishAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getFinishAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Print__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__0__Impl
	rule__Print__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getPrintKeyword_0()); }
	'Print'
	{ after(grammarAccess.getPrintAccess().getPrintKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__1__Impl
	rule__Print__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getPrintAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__2__Impl
	rule__Print__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getToPrintKeyword_2()); }
	'toPrint'
	{ after(grammarAccess.getPrintAccess().getToPrintKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__3__Impl
	rule__Print__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getToPrintAssignment_3()); }
	(rule__Print__ToPrintAssignment_3)
	{ after(grammarAccess.getPrintAccess().getToPrintAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getPrintAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolVar__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolVar__Group__0__Impl
	rule__BoolVar__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVar__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolVarAccess().getBoolVarKeyword_0()); }
	'BoolVar'
	{ after(grammarAccess.getBoolVarAccess().getBoolVarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVar__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolVar__Group__1__Impl
	rule__BoolVar__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVar__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolVarAccess().getNameAssignment_1()); }
	(rule__BoolVar__NameAssignment_1)
	{ after(grammarAccess.getBoolVarAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVar__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolVar__Group__2__Impl
	rule__BoolVar__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVar__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolVarAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getBoolVarAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVar__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolVar__Group__3__Impl
	rule__BoolVar__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVar__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolVarAccess().getBoolVarExprKeyword_3()); }
	'boolVarExpr'
	{ after(grammarAccess.getBoolVarAccess().getBoolVarExprKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVar__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolVar__Group__4__Impl
	rule__BoolVar__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVar__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolVarAccess().getBoolVarExprAssignment_4()); }
	(rule__BoolVar__BoolVarExprAssignment_4)
	{ after(grammarAccess.getBoolVarAccess().getBoolVarExprAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVar__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolVar__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVar__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolVarAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getBoolVarAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IntVar__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntVar__Group__0__Impl
	rule__IntVar__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVar__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntVarAccess().getIntVarKeyword_0()); }
	'IntVar'
	{ after(grammarAccess.getIntVarAccess().getIntVarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVar__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntVar__Group__1__Impl
	rule__IntVar__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVar__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntVarAccess().getNameAssignment_1()); }
	(rule__IntVar__NameAssignment_1)
	{ after(grammarAccess.getIntVarAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVar__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntVar__Group__2__Impl
	rule__IntVar__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVar__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntVarAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getIntVarAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVar__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntVar__Group__3__Impl
	rule__IntVar__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVar__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntVarAccess().getIntVarExprKeyword_3()); }
	'intVarExpr'
	{ after(grammarAccess.getIntVarAccess().getIntVarExprKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVar__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntVar__Group__4__Impl
	rule__IntVar__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVar__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntVarAccess().getIntVarExprAssignment_4()); }
	(rule__IntVar__IntVarExprAssignment_4)
	{ after(grammarAccess.getIntVarAccess().getIntVarExprAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVar__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntVar__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVar__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntVarAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getIntVarAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IntVarAccess__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntVarAccess__Group__0__Impl
	rule__IntVarAccess__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVarAccess__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntVarAccessAccess().getIntVarAccessKeyword_0()); }
	'IntVarAccess'
	{ after(grammarAccess.getIntVarAccessAccess().getIntVarAccessKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVarAccess__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntVarAccess__Group__1__Impl
	rule__IntVarAccess__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVarAccess__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntVarAccessAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getIntVarAccessAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVarAccess__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntVarAccess__Group__2__Impl
	rule__IntVarAccess__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVarAccess__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntVarAccessAccess().getIntVarRefKeyword_2()); }
	'intVarRef'
	{ after(grammarAccess.getIntVarAccessAccess().getIntVarRefKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVarAccess__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntVarAccess__Group__3__Impl
	rule__IntVarAccess__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVarAccess__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntVarAccessAccess().getIntVarRefAssignment_3()); }
	(rule__IntVarAccess__IntVarRefAssignment_3)
	{ after(grammarAccess.getIntVarAccessAccess().getIntVarRefAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVarAccess__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntVarAccess__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVarAccess__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntVarAccessAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getIntVarAccessAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolVarAccess__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolVarAccess__Group__0__Impl
	rule__BoolVarAccess__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVarAccess__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolVarAccessAccess().getBoolVarAccessKeyword_0()); }
	'BoolVarAccess'
	{ after(grammarAccess.getBoolVarAccessAccess().getBoolVarAccessKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVarAccess__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolVarAccess__Group__1__Impl
	rule__BoolVarAccess__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVarAccess__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolVarAccessAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getBoolVarAccessAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVarAccess__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolVarAccess__Group__2__Impl
	rule__BoolVarAccess__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVarAccess__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolVarAccessAccess().getBoolVarRefKeyword_2()); }
	'boolVarRef'
	{ after(grammarAccess.getBoolVarAccessAccess().getBoolVarRefKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVarAccess__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolVarAccess__Group__3__Impl
	rule__BoolVarAccess__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVarAccess__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolVarAccessAccess().getBoolVarRefAssignment_3()); }
	(rule__BoolVarAccess__BoolVarRefAssignment_3)
	{ after(grammarAccess.getBoolVarAccessAccess().getBoolVarRefAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVarAccess__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolVarAccess__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVarAccess__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolVarAccessAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getBoolVarAccessAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Equal__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equal__Group__0__Impl
	rule__Equal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualAccess().getEqualKeyword_0()); }
	'Equal'
	{ after(grammarAccess.getEqualAccess().getEqualKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equal__Group__1__Impl
	rule__Equal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getEqualAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equal__Group__2__Impl
	rule__Equal__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualAccess().getLeftEqualKeyword_2()); }
	'leftEqual'
	{ after(grammarAccess.getEqualAccess().getLeftEqualKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equal__Group__3__Impl
	rule__Equal__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualAccess().getLeftEqualAssignment_3()); }
	(rule__Equal__LeftEqualAssignment_3)
	{ after(grammarAccess.getEqualAccess().getLeftEqualAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equal__Group__4__Impl
	rule__Equal__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualAccess().getRightEqualKeyword_4()); }
	'rightEqual'
	{ after(grammarAccess.getEqualAccess().getRightEqualKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equal__Group__5__Impl
	rule__Equal__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualAccess().getRightEqualAssignment_5()); }
	(rule__Equal__RightEqualAssignment_5)
	{ after(grammarAccess.getEqualAccess().getRightEqualAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equal__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getEqualAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__StartMethodAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getStartMethodMethodCrossReference_1_0()); }
		(
			{ before(grammarAccess.getProgramAccess().getStartMethodMethodEStringParserRuleCall_1_0_1()); }
			ruleEString
			{ after(grammarAccess.getProgramAccess().getStartMethodMethodEStringParserRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getProgramAccess().getStartMethodMethodCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__MethodsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getMethodsMethodParserRuleCall_3_0()); }
		ruleMethod
		{ after(grammarAccess.getProgramAccess().getMethodsMethodParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getNameEStringParserRuleCall_0_0()); }
		ruleEString
		{ after(grammarAccess.getMethodAccess().getNameEStringParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__MethodBlockAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getMethodBlockBlockParserRuleCall_1_0()); }
		ruleBlock
		{ after(grammarAccess.getMethodAccess().getMethodBlockBlockParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__BlockStatementsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getBlockStatementsStatementParserRuleCall_2_0()); }
		ruleStatement
		{ after(grammarAccess.getBlockAccess().getBlockStatementsStatementParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__MethodToCallAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodCallAccess().getMethodToCallMethodCrossReference_3_0()); }
		(
			{ before(grammarAccess.getMethodCallAccess().getMethodToCallMethodEStringParserRuleCall_3_0_1()); }
			ruleEString
			{ after(grammarAccess.getMethodCallAccess().getMethodToCallMethodEStringParserRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getMethodCallAccess().getMethodToCallMethodCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__ControlStructureConditionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getControlStructureConditionBoolExpressionParserRuleCall_3_0()); }
		ruleBoolExpression
		{ after(grammarAccess.getIfAccess().getControlStructureConditionBoolExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__ThenBlockAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getThenBlockBlockParserRuleCall_5_0()); }
		ruleBlock
		{ after(grammarAccess.getIfAccess().getThenBlockBlockParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__ElseBlockAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getElseBlockBlockParserRuleCall_7_0()); }
		ruleBlock
		{ after(grammarAccess.getIfAccess().getElseBlockBlockParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__ControlStructureConditionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileAccess().getControlStructureConditionBoolExpressionParserRuleCall_3_0()); }
		ruleBoolExpression
		{ after(grammarAccess.getWhileAccess().getControlStructureConditionBoolExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__WhileBlockAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileAccess().getWhileBlockBlockParserRuleCall_5_0()); }
		ruleBlock
		{ after(grammarAccess.getWhileAccess().getWhileBlockBlockParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__NotExpressionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotAccess().getNotExpressionBoolExpressionParserRuleCall_3_0()); }
		ruleBoolExpression
		{ after(grammarAccess.getNotAccess().getNotExpressionBoolExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__LeftAndExpressionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getLeftAndExpressionBoolExpressionParserRuleCall_3_0()); }
		ruleBoolExpression
		{ after(grammarAccess.getAndAccess().getLeftAndExpressionBoolExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__RightAndExpressionAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getRightAndExpressionBoolExpressionParserRuleCall_5_0()); }
		ruleBoolExpression
		{ after(grammarAccess.getAndAccess().getRightAndExpressionBoolExpressionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntConst__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntConstAccess().getValueEIntParserRuleCall_3_0()); }
		ruleEInt
		{ after(grammarAccess.getIntConstAccess().getValueEIntParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__LeftPlusAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusAccess().getLeftPlusIntExpressionParserRuleCall_3_0()); }
		ruleIntExpression
		{ after(grammarAccess.getPlusAccess().getLeftPlusIntExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Plus__RightPlusAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusAccess().getRightPlusIntExpressionParserRuleCall_5_0()); }
		ruleIntExpression
		{ after(grammarAccess.getPlusAccess().getRightPlusIntExpressionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Async__AsyncBlockAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAsyncAccess().getAsyncBlockStatementParserRuleCall_3_0()); }
		ruleStatement
		{ after(grammarAccess.getAsyncAccess().getAsyncBlockStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Finish__FinishStatementAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFinishAccess().getFinishStatementStatementParserRuleCall_3_0()); }
		ruleStatement
		{ after(grammarAccess.getFinishAccess().getFinishStatementStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__ToPrintAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintAccess().getToPrintExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getPrintAccess().getToPrintExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVar__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolVarAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getBoolVarAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVar__BoolVarExprAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolVarAccess().getBoolVarExprBoolExpressionParserRuleCall_4_0()); }
		ruleBoolExpression
		{ after(grammarAccess.getBoolVarAccess().getBoolVarExprBoolExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVar__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntVarAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getIntVarAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVar__IntVarExprAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntVarAccess().getIntVarExprIntExpressionParserRuleCall_4_0()); }
		ruleIntExpression
		{ after(grammarAccess.getIntVarAccess().getIntVarExprIntExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVarAccess__IntVarRefAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntVarAccessAccess().getIntVarRefIntVarCrossReference_3_0()); }
		(
			{ before(grammarAccess.getIntVarAccessAccess().getIntVarRefIntVarEStringParserRuleCall_3_0_1()); }
			ruleEString
			{ after(grammarAccess.getIntVarAccessAccess().getIntVarRefIntVarEStringParserRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getIntVarAccessAccess().getIntVarRefIntVarCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolVarAccess__BoolVarRefAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolVarAccessAccess().getBoolVarRefBoolVarCrossReference_3_0()); }
		(
			{ before(grammarAccess.getBoolVarAccessAccess().getBoolVarRefBoolVarEStringParserRuleCall_3_0_1()); }
			ruleEString
			{ after(grammarAccess.getBoolVarAccessAccess().getBoolVarRefBoolVarEStringParserRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getBoolVarAccessAccess().getBoolVarRefBoolVarCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__LeftEqualAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualAccess().getLeftEqualIntExpressionParserRuleCall_3_0()); }
		ruleIntExpression
		{ after(grammarAccess.getEqualAccess().getLeftEqualIntExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equal__RightEqualAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualAccess().getRightEqualIntExpressionParserRuleCall_5_0()); }
		ruleIntExpression
		{ after(grammarAccess.getEqualAccess().getRightEqualIntExpressionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
