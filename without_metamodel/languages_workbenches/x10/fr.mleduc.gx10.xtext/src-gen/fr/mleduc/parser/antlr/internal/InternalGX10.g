/*
 * generated by Xtext 2.9.2
 */
grammar InternalGX10;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.mleduc.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.mleduc.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.mleduc.services.GX10GrammarAccess;

}

@parser::members {

 	private GX10GrammarAccess grammarAccess;

    public InternalGX10Parser(TokenStream input, GX10GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected GX10GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='main'
		{
			newLeafNode(otherlv_0, grammarAccess.getProgramAccess().getMainKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProgramRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getProgramAccess().getStartMethodMethodCrossReference_1_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getProgramAccess().getSemicolonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getMethodsMethodParserRuleCall_3_0());
				}
				lv_methods_3_0=ruleMethod
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"methods",
						lv_methods_3_0,
						"fr.mleduc.GX10.Method");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getBlockParserRuleCall_0());
		}
		this_Block_0=ruleBlock
		{
			$current = $this_Block_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIfParserRuleCall_1());
		}
		this_If_1=ruleIf
		{
			$current = $this_If_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getWhileParserRuleCall_2());
		}
		this_While_2=ruleWhile
		{
			$current = $this_While_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getTrueParserRuleCall_3());
		}
		this_True_3=ruleTrue
		{
			$current = $this_True_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getFalseParserRuleCall_4());
		}
		this_False_4=ruleFalse
		{
			$current = $this_False_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getNotParserRuleCall_5());
		}
		this_Not_5=ruleNot
		{
			$current = $this_Not_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getAndParserRuleCall_6());
		}
		this_And_6=ruleAnd
		{
			$current = $this_And_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIntConstParserRuleCall_7());
		}
		this_IntConst_7=ruleIntConst
		{
			$current = $this_IntConst_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getPlusParserRuleCall_8());
		}
		this_Plus_8=rulePlus
		{
			$current = $this_Plus_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getAsyncParserRuleCall_9());
		}
		this_Async_9=ruleAsync
		{
			$current = $this_Async_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getMethodCallParserRuleCall_10());
		}
		this_MethodCall_10=ruleMethodCall
		{
			$current = $this_MethodCall_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getFinishParserRuleCall_11());
		}
		this_Finish_11=ruleFinish
		{
			$current = $this_Finish_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getPrintParserRuleCall_12());
		}
		this_Print_12=rulePrint
		{
			$current = $this_Print_12.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getBoolVarParserRuleCall_13());
		}
		this_BoolVar_13=ruleBoolVar
		{
			$current = $this_BoolVar_13.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIntVarParserRuleCall_14());
		}
		this_IntVar_14=ruleIntVar
		{
			$current = $this_IntVar_14.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIntVarAccessParserRuleCall_15());
		}
		this_IntVarAccess_15=ruleIntVarAccess
		{
			$current = $this_IntVarAccess_15.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getBoolVarAccessParserRuleCall_16());
		}
		this_BoolVarAccess_16=ruleBoolVarAccess
		{
			$current = $this_BoolVarAccess_16.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getEqualParserRuleCall_17());
		}
		this_Equal_17=ruleEqual
		{
			$current = $this_Equal_17.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBoolExpression
entryRuleBoolExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolExpressionRule()); }
	iv_ruleBoolExpression=ruleBoolExpression
	{ $current=$iv_ruleBoolExpression.current; }
	EOF;

// Rule BoolExpression
ruleBoolExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBoolExpressionAccess().getTrueParserRuleCall_0());
		}
		this_True_0=ruleTrue
		{
			$current = $this_True_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBoolExpressionAccess().getFalseParserRuleCall_1());
		}
		this_False_1=ruleFalse
		{
			$current = $this_False_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBoolExpressionAccess().getNotParserRuleCall_2());
		}
		this_Not_2=ruleNot
		{
			$current = $this_Not_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBoolExpressionAccess().getAndParserRuleCall_3());
		}
		this_And_3=ruleAnd
		{
			$current = $this_And_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBoolExpressionAccess().getBoolVarAccessParserRuleCall_4());
		}
		this_BoolVarAccess_4=ruleBoolVarAccess
		{
			$current = $this_BoolVarAccess_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBoolExpressionAccess().getEqualParserRuleCall_5());
		}
		this_Equal_5=ruleEqual
		{
			$current = $this_Equal_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIntExpression
entryRuleIntExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntExpressionRule()); }
	iv_ruleIntExpression=ruleIntExpression
	{ $current=$iv_ruleIntExpression.current; }
	EOF;

// Rule IntExpression
ruleIntExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getIntExpressionAccess().getIntConstParserRuleCall_0());
		}
		this_IntConst_0=ruleIntConst
		{
			$current = $this_IntConst_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getIntExpressionAccess().getPlusParserRuleCall_1());
		}
		this_Plus_1=rulePlus
		{
			$current = $this_Plus_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getIntExpressionAccess().getIntVarAccessParserRuleCall_2());
		}
		this_IntVarAccess_2=ruleIntVarAccess
		{
			$current = $this_IntVarAccess_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getTrueParserRuleCall_0());
		}
		this_True_0=ruleTrue
		{
			$current = $this_True_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getFalseParserRuleCall_1());
		}
		this_False_1=ruleFalse
		{
			$current = $this_False_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getNotParserRuleCall_2());
		}
		this_Not_2=ruleNot
		{
			$current = $this_Not_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getAndParserRuleCall_3());
		}
		this_And_3=ruleAnd
		{
			$current = $this_And_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getIntConstParserRuleCall_4());
		}
		this_IntConst_4=ruleIntConst
		{
			$current = $this_IntConst_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getPlusParserRuleCall_5());
		}
		this_Plus_5=rulePlus
		{
			$current = $this_Plus_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getMethodCallParserRuleCall_6());
		}
		this_MethodCall_6=ruleMethodCall
		{
			$current = $this_MethodCall_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getBoolVarParserRuleCall_7());
		}
		this_BoolVar_7=ruleBoolVar
		{
			$current = $this_BoolVar_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getIntVarAccessParserRuleCall_8());
		}
		this_IntVarAccess_8=ruleIntVarAccess
		{
			$current = $this_IntVarAccess_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getBoolVarAccessParserRuleCall_9());
		}
		this_BoolVarAccess_9=ruleBoolVarAccess
		{
			$current = $this_BoolVarAccess_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getEqualParserRuleCall_10());
		}
		this_Equal_10=ruleEqual
		{
			$current = $this_Equal_10.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	iv_ruleMethod=ruleMethod
	{ $current=$iv_ruleMethod.current; }
	EOF;

// Rule Method
ruleMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodAccess().getNameEStringParserRuleCall_0_0());
				}
				lv_name_0_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"fr.mleduc.GX10.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodAccess().getMethodBlockBlockParserRuleCall_1_0());
				}
				lv_methodBlock_1_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodRule());
					}
					set(
						$current,
						"methodBlock",
						lv_methodBlock_1_0,
						"fr.mleduc.GX10.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current; }
	EOF;

// Rule Block
ruleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBlockAccess().getBlockAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getBlockStatementsStatementParserRuleCall_2_0());
				}
				lv_blockStatements_2_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					add(
						$current,
						"blockStatements",
						lv_blockStatements_2_0,
						"fr.mleduc.GX10.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleMethodCall
entryRuleMethodCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodCallRule()); }
	iv_ruleMethodCall=ruleMethodCall
	{ $current=$iv_ruleMethodCall.current; }
	EOF;

// Rule MethodCall
ruleMethodCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='MethodCall'
		{
			newLeafNode(otherlv_0, grammarAccess.getMethodCallAccess().getMethodCallKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getMethodCallAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='methodToCall'
		{
			newLeafNode(otherlv_2, grammarAccess.getMethodCallAccess().getMethodToCallKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodCallRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getMethodCallAccess().getMethodToCallMethodCrossReference_3_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getMethodCallAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleIf
entryRuleIf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfRule()); }
	iv_ruleIf=ruleIf
	{ $current=$iv_ruleIf.current; }
	EOF;

// Rule If
ruleIf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='If'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfAccess().getIfKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getIfAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='controlStructureCondition'
		{
			newLeafNode(otherlv_2, grammarAccess.getIfAccess().getControlStructureConditionKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getControlStructureConditionBoolExpressionParserRuleCall_3_0());
				}
				lv_controlStructureCondition_3_0=ruleBoolExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					set(
						$current,
						"controlStructureCondition",
						lv_controlStructureCondition_3_0,
						"fr.mleduc.GX10.BoolExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='thenBlock'
		{
			newLeafNode(otherlv_4, grammarAccess.getIfAccess().getThenBlockKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getThenBlockBlockParserRuleCall_5_0());
				}
				lv_thenBlock_5_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					set(
						$current,
						"thenBlock",
						lv_thenBlock_5_0,
						"fr.mleduc.GX10.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='elseBlock'
		{
			newLeafNode(otherlv_6, grammarAccess.getIfAccess().getElseBlockKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getElseBlockBlockParserRuleCall_7_0());
				}
				lv_elseBlock_7_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					set(
						$current,
						"elseBlock",
						lv_elseBlock_7_0,
						"fr.mleduc.GX10.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getIfAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleWhile
entryRuleWhile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileRule()); }
	iv_ruleWhile=ruleWhile
	{ $current=$iv_ruleWhile.current; }
	EOF;

// Rule While
ruleWhile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='While'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhileAccess().getWhileKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getWhileAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='controlStructureCondition'
		{
			newLeafNode(otherlv_2, grammarAccess.getWhileAccess().getControlStructureConditionKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileAccess().getControlStructureConditionBoolExpressionParserRuleCall_3_0());
				}
				lv_controlStructureCondition_3_0=ruleBoolExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileRule());
					}
					set(
						$current,
						"controlStructureCondition",
						lv_controlStructureCondition_3_0,
						"fr.mleduc.GX10.BoolExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='whileBlock'
		{
			newLeafNode(otherlv_4, grammarAccess.getWhileAccess().getWhileBlockKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileAccess().getWhileBlockBlockParserRuleCall_5_0());
				}
				lv_whileBlock_5_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileRule());
					}
					set(
						$current,
						"whileBlock",
						lv_whileBlock_5_0,
						"fr.mleduc.GX10.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getWhileAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleTrue
entryRuleTrue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTrueRule()); }
	iv_ruleTrue=ruleTrue
	{ $current=$iv_ruleTrue.current; }
	EOF;

// Rule True
ruleTrue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTrueAccess().getTrueAction_0(),
					$current);
			}
		)
		otherlv_1='True'
		{
			newLeafNode(otherlv_1, grammarAccess.getTrueAccess().getTrueKeyword_1());
		}
	)
;

// Entry rule entryRuleFalse
entryRuleFalse returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFalseRule()); }
	iv_ruleFalse=ruleFalse
	{ $current=$iv_ruleFalse.current; }
	EOF;

// Rule False
ruleFalse returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFalseAccess().getFalseAction_0(),
					$current);
			}
		)
		otherlv_1='False'
		{
			newLeafNode(otherlv_1, grammarAccess.getFalseAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleNot
entryRuleNot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotRule()); }
	iv_ruleNot=ruleNot
	{ $current=$iv_ruleNot.current; }
	EOF;

// Rule Not
ruleNot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Not'
		{
			newLeafNode(otherlv_0, grammarAccess.getNotAccess().getNotKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getNotAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='notExpression'
		{
			newLeafNode(otherlv_2, grammarAccess.getNotAccess().getNotExpressionKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNotAccess().getNotExpressionBoolExpressionParserRuleCall_3_0());
				}
				lv_notExpression_3_0=ruleBoolExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNotRule());
					}
					set(
						$current,
						"notExpression",
						lv_notExpression_3_0,
						"fr.mleduc.GX10.BoolExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getNotAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current; }
	EOF;

// Rule And
ruleAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='And'
		{
			newLeafNode(otherlv_0, grammarAccess.getAndAccess().getAndKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getAndAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='leftAndExpression'
		{
			newLeafNode(otherlv_2, grammarAccess.getAndAccess().getLeftAndExpressionKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAndAccess().getLeftAndExpressionBoolExpressionParserRuleCall_3_0());
				}
				lv_leftAndExpression_3_0=ruleBoolExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAndRule());
					}
					set(
						$current,
						"leftAndExpression",
						lv_leftAndExpression_3_0,
						"fr.mleduc.GX10.BoolExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='rightAndExpression'
		{
			newLeafNode(otherlv_4, grammarAccess.getAndAccess().getRightAndExpressionKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAndAccess().getRightAndExpressionBoolExpressionParserRuleCall_5_0());
				}
				lv_rightAndExpression_5_0=ruleBoolExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAndRule());
					}
					set(
						$current,
						"rightAndExpression",
						lv_rightAndExpression_5_0,
						"fr.mleduc.GX10.BoolExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getAndAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleIntConst
entryRuleIntConst returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntConstRule()); }
	iv_ruleIntConst=ruleIntConst
	{ $current=$iv_ruleIntConst.current; }
	EOF;

// Rule IntConst
ruleIntConst returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='IntConst'
		{
			newLeafNode(otherlv_0, grammarAccess.getIntConstAccess().getIntConstKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getIntConstAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='value'
		{
			newLeafNode(otherlv_2, grammarAccess.getIntConstAccess().getValueKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIntConstAccess().getValueEIntParserRuleCall_3_0());
				}
				lv_value_3_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntConstRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"fr.mleduc.GX10.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getIntConstAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRulePlus
entryRulePlus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlusRule()); }
	iv_rulePlus=rulePlus
	{ $current=$iv_rulePlus.current; }
	EOF;

// Rule Plus
rulePlus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Plus'
		{
			newLeafNode(otherlv_0, grammarAccess.getPlusAccess().getPlusKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getPlusAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='leftPlus'
		{
			newLeafNode(otherlv_2, grammarAccess.getPlusAccess().getLeftPlusKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPlusAccess().getLeftPlusIntExpressionParserRuleCall_3_0());
				}
				lv_leftPlus_3_0=ruleIntExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPlusRule());
					}
					set(
						$current,
						"leftPlus",
						lv_leftPlus_3_0,
						"fr.mleduc.GX10.IntExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='rightPlus'
		{
			newLeafNode(otherlv_4, grammarAccess.getPlusAccess().getRightPlusKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPlusAccess().getRightPlusIntExpressionParserRuleCall_5_0());
				}
				lv_rightPlus_5_0=ruleIntExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPlusRule());
					}
					set(
						$current,
						"rightPlus",
						lv_rightPlus_5_0,
						"fr.mleduc.GX10.IntExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getPlusAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleAsync
entryRuleAsync returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAsyncRule()); }
	iv_ruleAsync=ruleAsync
	{ $current=$iv_ruleAsync.current; }
	EOF;

// Rule Async
ruleAsync returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Async'
		{
			newLeafNode(otherlv_0, grammarAccess.getAsyncAccess().getAsyncKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getAsyncAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='asyncBlock'
		{
			newLeafNode(otherlv_2, grammarAccess.getAsyncAccess().getAsyncBlockKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAsyncAccess().getAsyncBlockStatementParserRuleCall_3_0());
				}
				lv_asyncBlock_3_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAsyncRule());
					}
					set(
						$current,
						"asyncBlock",
						lv_asyncBlock_3_0,
						"fr.mleduc.GX10.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getAsyncAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleFinish
entryRuleFinish returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFinishRule()); }
	iv_ruleFinish=ruleFinish
	{ $current=$iv_ruleFinish.current; }
	EOF;

// Rule Finish
ruleFinish returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Finish'
		{
			newLeafNode(otherlv_0, grammarAccess.getFinishAccess().getFinishKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getFinishAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='finishStatement'
		{
			newLeafNode(otherlv_2, grammarAccess.getFinishAccess().getFinishStatementKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFinishAccess().getFinishStatementStatementParserRuleCall_3_0());
				}
				lv_finishStatement_3_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFinishRule());
					}
					set(
						$current,
						"finishStatement",
						lv_finishStatement_3_0,
						"fr.mleduc.GX10.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getFinishAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRulePrint
entryRulePrint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrintRule()); }
	iv_rulePrint=rulePrint
	{ $current=$iv_rulePrint.current; }
	EOF;

// Rule Print
rulePrint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Print'
		{
			newLeafNode(otherlv_0, grammarAccess.getPrintAccess().getPrintKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getPrintAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='toPrint'
		{
			newLeafNode(otherlv_2, grammarAccess.getPrintAccess().getToPrintKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPrintAccess().getToPrintExpressionParserRuleCall_3_0());
				}
				lv_toPrint_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrintRule());
					}
					set(
						$current,
						"toPrint",
						lv_toPrint_3_0,
						"fr.mleduc.GX10.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getPrintAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleBoolVar
entryRuleBoolVar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolVarRule()); }
	iv_ruleBoolVar=ruleBoolVar
	{ $current=$iv_ruleBoolVar.current; }
	EOF;

// Rule BoolVar
ruleBoolVar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='BoolVar'
		{
			newLeafNode(otherlv_0, grammarAccess.getBoolVarAccess().getBoolVarKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBoolVarAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBoolVarRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"fr.mleduc.GX10.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getBoolVarAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='boolVarExpr'
		{
			newLeafNode(otherlv_3, grammarAccess.getBoolVarAccess().getBoolVarExprKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBoolVarAccess().getBoolVarExprBoolExpressionParserRuleCall_4_0());
				}
				lv_boolVarExpr_4_0=ruleBoolExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBoolVarRule());
					}
					set(
						$current,
						"boolVarExpr",
						lv_boolVarExpr_4_0,
						"fr.mleduc.GX10.BoolExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getBoolVarAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleIntVar
entryRuleIntVar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntVarRule()); }
	iv_ruleIntVar=ruleIntVar
	{ $current=$iv_ruleIntVar.current; }
	EOF;

// Rule IntVar
ruleIntVar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='IntVar'
		{
			newLeafNode(otherlv_0, grammarAccess.getIntVarAccess().getIntVarKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIntVarAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntVarRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"fr.mleduc.GX10.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getIntVarAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='intVarExpr'
		{
			newLeafNode(otherlv_3, grammarAccess.getIntVarAccess().getIntVarExprKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIntVarAccess().getIntVarExprIntExpressionParserRuleCall_4_0());
				}
				lv_intVarExpr_4_0=ruleIntExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntVarRule());
					}
					set(
						$current,
						"intVarExpr",
						lv_intVarExpr_4_0,
						"fr.mleduc.GX10.IntExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getIntVarAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleIntVarAccess
entryRuleIntVarAccess returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntVarAccessRule()); }
	iv_ruleIntVarAccess=ruleIntVarAccess
	{ $current=$iv_ruleIntVarAccess.current; }
	EOF;

// Rule IntVarAccess
ruleIntVarAccess returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='IntVarAccess'
		{
			newLeafNode(otherlv_0, grammarAccess.getIntVarAccessAccess().getIntVarAccessKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getIntVarAccessAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='intVarRef'
		{
			newLeafNode(otherlv_2, grammarAccess.getIntVarAccessAccess().getIntVarRefKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntVarAccessRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getIntVarAccessAccess().getIntVarRefIntVarCrossReference_3_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getIntVarAccessAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleBoolVarAccess
entryRuleBoolVarAccess returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolVarAccessRule()); }
	iv_ruleBoolVarAccess=ruleBoolVarAccess
	{ $current=$iv_ruleBoolVarAccess.current; }
	EOF;

// Rule BoolVarAccess
ruleBoolVarAccess returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='BoolVarAccess'
		{
			newLeafNode(otherlv_0, grammarAccess.getBoolVarAccessAccess().getBoolVarAccessKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getBoolVarAccessAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='boolVarRef'
		{
			newLeafNode(otherlv_2, grammarAccess.getBoolVarAccessAccess().getBoolVarRefKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBoolVarAccessRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getBoolVarAccessAccess().getBoolVarRefBoolVarCrossReference_3_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getBoolVarAccessAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleEqual
entryRuleEqual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualRule()); }
	iv_ruleEqual=ruleEqual
	{ $current=$iv_ruleEqual.current; }
	EOF;

// Rule Equal
ruleEqual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Equal'
		{
			newLeafNode(otherlv_0, grammarAccess.getEqualAccess().getEqualKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getEqualAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='leftEqual'
		{
			newLeafNode(otherlv_2, grammarAccess.getEqualAccess().getLeftEqualKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEqualAccess().getLeftEqualIntExpressionParserRuleCall_3_0());
				}
				lv_leftEqual_3_0=ruleIntExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEqualRule());
					}
					set(
						$current,
						"leftEqual",
						lv_leftEqual_3_0,
						"fr.mleduc.GX10.IntExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='rightEqual'
		{
			newLeafNode(otherlv_4, grammarAccess.getEqualAccess().getRightEqualKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEqualAccess().getRightEqualIntExpressionParserRuleCall_5_0());
				}
				lv_rightEqual_5_0=ruleIntExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEqualRule());
					}
					set(
						$current,
						"rightEqual",
						lv_rightEqual_5_0,
						"fr.mleduc.GX10.IntExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getEqualAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
