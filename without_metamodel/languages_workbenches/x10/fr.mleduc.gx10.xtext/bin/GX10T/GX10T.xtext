// automatically generated by Xtext
grammar GX10T with org.eclipse.xtext.common.Terminals

import "http://mleduc.fr/gx10" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Program returns Program:
	'Program'
	'{'
		'startMethod' startMethod=[Method|EString]
		('methods' '{' methods+=Method ( "," methods+=Method)* '}' )?
	'}';




Statement returns Statement:
	Block | If | While | True | False | Not | And | IntConst | Plus | Async | MethodCall | Finish | Print | BoolVar | IntVar | IntVarAccess | BoolVarAccess | Equal;

BoolExpression returns BoolExpression:
	True | False | Not | And | BoolVarAccess | Equal;

IntExpression returns IntExpression:
	IntConst | Plus | IntVarAccess;

Expression returns Expression:
	True | False | Not | And | IntConst | Plus | MethodCall | BoolVar | IntVarAccess | BoolVarAccess | Equal;



Method returns Method:
	'Method'
	name=EString
	'{'
		('calledBy' '(' calledBy+=[MethodCall|EString] ( "," calledBy+=[MethodCall|EString])* ')' )?
		'methodBlock' methodBlock=Block
	'}';

Block returns Block:
	{Block}
	'Block'
	'{'
		('blockStatements' '{' blockStatements+=Statement ( "," blockStatements+=Statement)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

MethodCall returns MethodCall:
	'MethodCall'
	'{'
		'methodToCall' methodToCall=[Method|EString]
	'}';

If returns If:
	'If'
	'{'
		'controlStructureCondition' controlStructureCondition=BoolExpression
		'thenBlock' thenBlock=Block
		'elseBlock' elseBlock=Block
	'}';

While returns While:
	'While'
	'{'
		'controlStructureCondition' controlStructureCondition=BoolExpression
		'whileBlock' whileBlock=Block
	'}';

True returns True:
	{True}
	'True'
	;

False returns False:
	{False}
	'False'
	;

Not returns Not:
	'Not'
	'{'
		'notExpression' notExpression=BoolExpression
	'}';

And returns And:
	'And'
	'{'
		'leftAndExpression' leftAndExpression=BoolExpression
		'rightAndExpression' rightAndExpression=BoolExpression
	'}';

IntConst returns IntConst:
	'IntConst'
	'{'
		'value' value=EInt
	'}';

Plus returns Plus:
	'Plus'
	'{'
		'leftPlus' leftPlus=IntExpression
		'rightPlus' rightPlus=IntExpression
	'}';

Async returns Async:
	'Async'
	'{'
		'asyncBlock' asyncBlock=Statement
	'}';

Finish returns Finish:
	'Finish'
	'{'
		'finishStatement' finishStatement=Statement
	'}';

Print returns Print:
	'Print'
	'{'
		'toPrint' toPrint=Expression
	'}';

BoolVar returns BoolVar:
	'BoolVar'
	name=EString
	'{'
		'boolVarExpr' boolVarExpr=BoolExpression
	'}';

IntVar returns IntVar:
	'IntVar'
	name=EString
	'{'
		'intVarExpr' intVarExpr=IntExpression
	'}';

IntVarAccess returns IntVarAccess:
	'IntVarAccess'
	'{'
		'intVarRef' intVarRef=[IntVar|EString]
	'}';

BoolVarAccess returns BoolVarAccess:
	'BoolVarAccess'
	'{'
		'boolVarRef' boolVarRef=[BoolVar|EString]
	'}';

Equal returns Equal:
	'Equal'
	'{'
		'leftEqual' leftEqual=IntExpression
		'rightEqual' rightEqual=IntExpression
	'}';

EInt returns ecore::EInt:
	'-'? INT;
